[{"title":"Migration from octopress to hexo","date":"2017-02-26T17:58:03.000Z","path":"2017/02/26/Migration-from-octopress-to-hexo/","text":"记录从Octopress迁移到hexoSteps 安装hexo，新建一个project pull yilia project，安装主题 把原来的post复制到hexo的source/post下面 原来的文章里面有两个}的情况，需要去掉","tags":[]},{"title":"Hello World","date":"2017-02-26T15:46:24.000Z","path":"2017/02/26/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"L: Chef online tutorial","date":"2015-07-31T15:13:48.000Z","path":"2015/07/31/l-chef-online-tutorial/","text":"Chef Online Tutorial 1. Learn the Chef basics - UbuntuObjectives: have a basic understanding of what happens when Chef runs. be able to write Chef code that defines a basic policy. be able to apply that policy to a server. a. Get set up Launch an Ubuntu virtual machine hosted by the chef. use vim for text editor b. Configure a resource Chef component Description resource describes some piece of infrastructure, such as a file, a template, or a package. recipe a file that groups related resources, such as everything needed to configure a web server, database server, or a load balancer. cookbook provides structure to your recipes and enables, such as our web server’s home page. In essence, a cookbook helps you stay organized. knife enables you to interact with the Chef server node all the computer resources infrastructure managed by Chef file chef docsdirectory chef docs chef-repo save all the resources files1chef-apply filename.rb #run the rb file hello.rb is a recipe, motd file is the resource. Resource also can be package, service.12345# Example for hello.rbfile ‘motd’ do action :create # default action, if there isn’t explicit, it will called. content ‘hello Tao’end The functionalities of recipe: install and configure software components. manage files. deploy applications. execute other recipes. c. Configure a package and serviceInstall the Apache package The order in the recipe is very important. But the orders of the attributes of the file is doesn’t matter.12345678910111213141516171819202122# webserver.rb configure the apache serverexecute ‘apt-get-update’ do command ‘apt-get update’end package ‘apache2’service ‘apache2’ do supports :status =&gt; true action [:enable, :start]endfile ‘/var/www/html/index.html’ do content ‘&lt;html&gt; &lt;body&gt; &lt;h1&gt;hello Tao&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;’ end&lt;/h&gt; &lt;/body&gt; &lt;/html&gt;end Verification1curl localhost # will see hell Tao d. Make your recipe more manageablemkdir cookbooks, use templates to handle html. chef-client to run the cookbooks with the recipe list. 2. Learn to manage Ubuntu Nodeobjectives: be able to write Chef code to define a policy from your workstation. be able to apply that policy to a node. understand how to access cookbooks written by the Chef community. a. Get Set upconfigure the chef locally b. Set up your Chef serverDownload cookbook from the chef supermarkets12knife cookbook site download learn\\_chef\\_apache2knife cookbook upload learn\\_chef\\_apache2 #upload the cookbook c. Bootstrap your nodeA very long command, don’t forget to apt-get update. 12knife node listknife node show node-name d. Update your node’s configurationYou ran knife bootstrap to associate your node with the Chef server and do an initial check-in. Bootstrapping is a one-time process.The knife ssh command enables you to update your node’s configuration when your cookbook changes.","tags":[{"name":"chef","slug":"chef","permalink":"http://yoursite.com/tags/chef/"},{"name":"tutorial","slug":"tutorial","permalink":"http://yoursite.com/tags/tutorial/"}]},{"title":"T: Chef Ruby","date":"2015-07-31T13:39:50.000Z","path":"2015/07/31/t-chef-ruby/","text":"chef componentng) 介绍主页 下载ubuntu chef 1. Install chef-db1sudo dpkg -i chefdk\\_0.6.2-1\\_amd64.deb ChefDK contains: An early version of a brand new command-line tool, chef, that aims to streamline Chef workflow, starting with new generators. The well-known cookbook dependency manager Berkshelf 3.0. The Test Kitchen integration testing framework. ChefSpec, which makes unit testing cookbooks a breeze. Foodcritic, a linting tool for doing static code analysis on cookbooks. All of the Chef tools you’re already familiar with: Chef Client, Knife, Ohai and Chef Zero. chefdb’s file structure after installation VerificationAfter installation, verify all the component: 1chef verify Componnet Description berkshelf 管理cookbook test-kitchen 测试cookbook框架 chef-client chef-dk Chef开发kit chefspec rubocop fauxhai knife-spork kitchen-vagrant package installation openssl 安全机制SSL Summary安装结束,验证所有component安装成功. 2. Install and configure the chef-server在chef主页注册hosted chef server, 之后下载starter kit下载starter kit Download start kit, chef-repo folder in the size of 9.5 KB locate the chef-repoContains chef configuration files. 1knife ssl fetch Verification1knife client -u windse7en -k ./.chef/windse7en.pem 验证通过显示list Summary配置好和server的connection结束 3. Install and configure a node在开启了SSH的情况下用knife配置node1knife bootstrap ip.address.. -x username -P password --sudo 安装命令deploy node divide into 4 steps: install the client(install chef-12.4.1-1.dmg above) start chef client creating a new client identity Synchronizing Cookbooks and Compile it Run handlers VerificationPay attention to the current folder, as the knife will use the pem file for validation The view after loginned the chef manager: SummaryUse the workstation or the server to monitor the node. I can’t find the chef-client in the node computer. 4. Delete the node1knife node delete node-name After the delete, the client still can show the that node information. VerificationBut there is no such node in the server. SummaryIt is quite easy to delte the node. But pay an attention to the info. The node information is node deleted completely from ther server.","tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"chef","slug":"chef","permalink":"http://yoursite.com/tags/chef/"},{"name":"infrastructure","slug":"infrastructure","permalink":"http://yoursite.com/tags/infrastructure/"}]},{"title":"B: Metaprogramming Ruby","date":"2015-07-27T19:28:22.000Z","path":"2015/07/27/b-metaprogramming-ruby/","text":"Metaprogramming is writing code that writes codes. Get all mixed modules for an object:1(class &lt;&lt; obj; self; end).included_modules&gt;&gt;)在runtime下，取得obj的class，查找所有modules Metaprogramming is writing code that manipulates language constructs at runtime. Chapter 1. Monday: The object modelClasses themselves are nothing but objects. 123String.class # =&gt; ClassClass.superclass # =&gt; ModuleModule.superclass # =&gt; Object User namespace to avoid name clash, Modulename::Classname obj.instance_variable_set(“@x”,10) 设定实例参数。 It finds the method. This is a process called method lookup. It executes the method. To do that, Ruby needs something called self. Method Lookupthe receiver and the ancestors chain. Kernel Method123456quire ‘rubygems’gem ‘rails’ , ‘= 2.3.2’module Kernel def gem(gem_name, \\*version\\_requirements) # ... “If you want to become a master of Ruby,” Bill warns you, “you should always know which object has the role self at any given moment.” Chapter 2. Tuesday: MethodsDynamic MethodsWhere you learn how to call and define methods dynamically and remove the duplicated code. 1obj.send(:my\\_method, 3) # =&gt; 6 method_missing is Kernel#method_missing() responded to. 1234567class Table def method\\_missing(id,\\*args,&amp;block) return as($1.to\\_sym,\\*args,&amp;block) if id.to_s =~ /^to\\_(.\\*)/ return rows\\_with($1.to\\_sym =&gt; args[0]) if id.to\\_s =~ /^rows\\_with\\_(.\\*)/ super end# ... “string”.to_sym 生成对的symbol，用symbol调用方法。用super调用method_missing函数 Dynamic ProxyDelegateClass( ) is a Mimic Method (241) that creates and returns a new Class. This class defines a method_missing( ) that forwards calls to a wrapped object, such as an Assistant. Manager inherits this method_missing( ), so it becomes a proxy of the wrapped object. 用method_missing方法实现最好也实现respond_to这个method, const_missing可以把missed constant找到方法输出。 下面程序有个bug哦12345678910class Roulette def method\\_missing(name, \\*args) person = name.to\\_s.capitalize 3.times do number = rand(10) + 1 puts “#&#123;number&#125;...” end “#&#123;person&#125; got a #&#123;number&#125;” endendnumber 的scope Ruby 里面用来去掉继承来的方法的method：Module#undef_method removes all methods, including the inherited ones.Module#remove_method removes the method from the receiver, but it leaves inherited methods alone.The Builder library which is an XML generator 就是用了Blank Slate把object的class去掉了。 Ruby 怕方法被override，用reserved method name：__send__() and __id__() Blank Slate 的样板code：12345class Computer instance\\_methods.each do |m| undef\\_method m unless m.to\\_s =~ /^\\_\\_|method\\_missing|respond\\_to?/ end # ... Chapter 3. Wednesday: Blocks 1return yield if block\\_given? Closure, the block is a closure. 看不到在my_method里面定义的variable x1234567def my\\_method x = “Goodbye yield(“cruel”)endx=”Hello”my\\_method &#123; |y| “#&#123;x&#125; #&#123;y&#125; world”&#125; # =&gt; “Hello cruel world” use local-variables to track the local_variables Whenever the program changes scope, some bindings are replaced by a new set of bindings. Scope Gates keywords: class, module, def, end Beyond the Scope GatesQ: Can you think of a method that does the same thing that class does?A: If you look at Ruby’s documentation, you’ll find the answer: Class.new( ) is a perfect replacement for class. You can also define instance methods in the class if you pass a block to Class.new( ): 12345678my\\_var = “Success”MyClass = Class.new do # Now we can print my\\_var here... puts “#&#123;my\\_var&#125; in the class definition!” def my\\_method # ...but how can we print it here? endend 这个方法叫做nested lexical scopes，也叫做flattening the scope把两个scopes挤压到一起，简称Flat Scope. Shared Scopes的例子123456789101112131415def define\\_methods shared = 0 Kernel.send :define\\_method, :counter do shared end Kernel.send :define\\_method, :inc do |x| shared += x endenddefine\\_methodscounter # =&gt; 0inc(4)counter # =&gt; 4 instance_eval()用这个方法可以做Context Probe，把变量放入object中123v = 2obj.instance\\_eval &#123; @v = v &#125;obj.instance\\_eval &#123; @v &#125; # =&gt; 2 这是一种容易打破Encapsulation的方法，用在test中非常有效果 Callable ObjectsProc lambda 两个block object, method 也是一个call的objetct 12345inc = Proc.new &#123;|x| x + 1&#125;inc.call(2)dec = lambda &#123;|x| x - 1&#125;dec.class # =&gt; Procdec.call(2) # =&gt; 1 &amp;block_name 得到一个Proc对象。Procs created with lambda( ) are called lambdas, while the others are simply called procs. The differences between Proc and lambda: lambda中return返回相关值，Proc的return会直接退出所在的scope。为了避免这个情况，不用return只是写值 当arity，arg的参数数量不一定的时候，如果和block中不一样，lambda会报错，但是Proc会裁剪或者补充nil 基于此，一般选择用lambda {} 更安全。12p = -&gt;(x) &#123; x + 1 &#125; # 一种替代方法p = lambda &#123; |x| x + 1 &#125; P.121 最后讲的DSL非常清晰的讲了开发过程的几个阶段，多练练 Chapter 4. Thursday: Class Definitionsclass_eval(), Module#class_eval(), add method to class “I want to open this object, and I don’t particularly care it’s a class,” then instance_eval( ) is fine. If you’re thinking “I want an Open Class (31) here,” then class_eval( ) is almost certainly a better match. Use instance variable to set the test data.12345678910111213class FakeTime def self.now; ‘Mon Apr 06 12:15:50’ ; endendrequire ‘test/unit’class TestLoan &lt; Test::Unit::TestCase def test_conversion_to_string Loan.instance_eval &#123; @time_class = FakeTime &#125; loan = Loan.new(‘War and Peace’ ) assert_equal ‘WAR AND PEACE loaned on Mon Apr 06 12:15:50’ , loan.to_s endend Singleton Methods in Actions:12345paragraph = “any string can be a paragraph”def paragraph.title? self.upcase == selfendindex(paragraph)只给一个对象添加方法，同一类的不增加此方法。 Class Macros:attr_accessor 就是一个Class Macros Ruby doesn’t always tell you the whole truth. Instead of the class that you see, an object can have its own special, hidden class. That’s called the eigenclass of the object对象的固有方法。 增加类方法：123456789101112class MyClass def self.my\\_method; endenddef MyClass.my\\_other\\_method; end# eigenclass methodclass MyClass class &lt;&lt; self def my\\_method; end endend Object#extend( ) is simply a shortcut that includes a module in the receiver’s eigenclass. You can always do that yourself, if you so choose. Aliases方法别名。1alias :new\\_name :old\\_name # alias is a keyword, not a method, that is why no comma. Chapter 5. Friday: Code That Writes Codefacets is a large collection of useful Ruby snippets.Kernel#eval, executes the code in the string and returns the result here documents: &lt;&lt; END END def self.inherited(subclass) 等类被继承的时候会调用此方法。inherited() is a Hook Method, as we can use it to hook into a particular event.Module#included() is another Hook MethodModule#extend_object() Module#method_added( ), method_removed( ), or method_undefined( ) Chapter 5重点看一下，这里面有很好的实现，特别重要！！！ Chapter 6. Epilogue一个小故事 Chapter 7. The Design of Active RecordDecoupling, Simplicity, No Duplication Chapter 8. Inside ActiveRecorddynamic attributes and dynamic finders Dynamic Attributes: ActiveRecord的源代码很好的解释了怎么用的，在2.3.2版本的ActiveRecord，active_methods.rb文件，里面关于method_missing and respond_to?的重定义，很好的解释了Ghost Method 的用法。 Dynamic Finders: ActiveRecord, base.rb 里面的method missing方法和respond to?方法 There are also techniques and tools that you can leverage to deal with that complexity and to avoid some common metaprogramming pitfalls. Some of these tools, such as unit tests and Monkeypatch guards Chapter 9. Metaprogramming Safely What’s the pitfall of Metapgrogramming? How to do unit test? before_filter method is defined in the ActionPack2.3.2/action_controller/filers.rbactionpack-2.3.2/test/controller/filters_test.rb test case for the filters. Open Class, Monkeypatches is dangerous: is global. invisible, hard to be viewed. (included as a module, can be seen by the ancestors) override old method implicitly Rake use method_defined? to defend the Monkeypatch for override old method. Appendix A:Ruby idioms, Metaprogramming spells: Spell Description Example Argument Arrays 一队列参数 method(*args) Around Alias 方法别名 alias :old_reverse :reverse Blank Slate 去掉方法定义 undef_method m Class Extension Mixin module中扩展Hook method module M; extent ModuleName Class Macro 类的方法调用Macro attr_accessor :age Clean Room 用一个对象作为环境评价一个block CleanRoom.new.instance_eval { method } Class Extension 混合方法进入eigenclass class &lt;&lt; C; include M; end Code Processor 运行文件里的命令 eval ‘file string’ Context Probe 用探针访问私有域 obj.instance_eval { @private_variable } Deferred Evaluation 调用Proc对象 &block; block.call Dynamic Dispatch 动态调用方法 obj.public_send(:method_name) Dynamic Method 动态定义方法 define_method :my_method Dynamic Proxy 将方法delegate到其他对象 @target.send(name, *args, &amp;block) Flat Scope 用block来传值入object obj.instance_eval { @attr = local_variable} Ghost Method 用method_missing和respond_to method_missing, respond_to Hook Method 重写方法反应object model events def self.inherited(subclass) Kernel Method 类似全局函数了 module Kernel;def a_method Lazy Instance Variable 直到用的时候才初始化 def attribute; @attribute II= ‘value’ Mimic Method attribute=() 就是方法，但是用起来mimic attr_reader, private Monkeypatch runtime改变class的features class String; def reverse Named Arguments 函数参数的命名 method(args_hash) Namespace 避免命名冲突 MyNamespace::Array Nil Guards 用来实例化避免nil @aII= [] Object Extension 设定唯一方法放到object’s eigenclass中 class &lt;&lt; obj; include M ; end Open Class rutime修改class class String; def reverse Pattern Dispatch 根据名字调用方法 public_send Sandbox 沙盒安全运行 proc { $SAFE = 2}.call Scope Gate 作用域 class, module, def Self Yield 把这个对象传给block [‘a’,’b’].shift.tap {}.upcase Shared Score 测试里面的初始化过程 lambda{ shared=10}.call Singleton Method 给唯一对象的方法 class &lt;&lt; obj; def method;end; end String of Code 命令放到字符串里 eval(‘1+1’) Symbol#to_proc 直接传方法名，当block非常简单的时候 names.map(%:capitalize) tap 用来给block传自己的对象，debug 更容易123456class Object def tap yield self self endend Symbol#to_proc12345678class Symbol def to\\_proc Proc.new &#123;|x| x.send(self) &#125; endendnames.map(&amp;:capitalize.to\\_proc) #直接调用Symbol#to\\_procnames.map(&amp;:capitalize) # 系统简化以后的效果 lambda,proc 不同，主要是参数不同以后的反应，还有return效果，一般都用lambda。Class.ancesters 类的ancestors来看都有哪些modules和classInstance.methods来看都有哪些方法。&amp;block, block.call() 还是不一样的。1234567891011class CArray &lt; Array def c(&amp;block) collect! &amp;block # 等于把block的字符串都考过来collect! &#123; |e| e*2 &#125; endendclass CArray &lt; Array def c collect! yield # it’s the same as the block.call endend 在源码里面看实现下载ruby源码 Appendix B: DSL","tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"metaprogramming","slug":"metaprogramming","permalink":"http://yoursite.com/tags/metaprogramming/"}]},{"title":"Learn: linux command tips","date":"2015-07-22T15:48:10.000Z","path":"2015/07/22/learn-linux-command-tips/","text":"info帮助的中级文档，可以入手学习Emacs。主要的操作 Command Description h, ? help n([),p(]) next node, previous node m go to node by name l last location t top of file u upper layer of nodes sedSed 详解大神级的全能文件处理工具。 Sign Description $ last line = 算行数 3,\\$ 从3行到文件结尾 s///g 全文替换 s/(&lt;[^&gt;]*)/\\1/g group regex display /fish/c cat 替换匹配行 /fish/d delete the line 1p print the line N;s/\\n/,/ N 把下一行内容也放入缓冲区匹配 1 a Test; 1 i Test insert and append context pattern space是测试和输出的buffer，hold space是装要测试的下步数据的内容。 HoldSpace Description g hold space 放到pattern space，原有内容清除 G append in pattern space\\n h pattern space 放到hold space，原有内容清除 H append in hold space\\n x 交换patern space和hold space","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"command","slug":"command","permalink":"http://yoursite.com/tags/command/"}]},{"title":"B: Design Patterns in Ruby","date":"2015-07-17T19:08:30.000Z","path":"2015/07/17/book-design-patterns-in-ruby/","text":"Design Patterns in RubyGoF(Gang of Four) book: Design Patterns: Elements of Reusable Object-Oriented Software. prefer composition to inheritancy. Internal Domain-Specific Language(DSL), metaprogramming, convention not configuration 怎么用？How do you add features to your program without turning the whole thing into a huge, unmanageable mess? So far, you have seen how to split the internal workings of your objects up among a family of classes with the Template Method pattern and how to use the Strategy pattern to split off whole chunks of algorithms. You have also seen how to react to requests coming into your objects with the Command pattern and how to keep up with changes made to other objects with the Observer pattern. Composites and iterators each help in their own way in dealing with collections of objects. 14 Design Patterns: Template Method: Every pattern has a problem that it is trying to solve. For example, perhaps your code always wants to do exactly the same thing, except at step 44. Sometimes step 44 wants to do this, and sometimes it wants to do that. Perhaps you need a Template Method. Strategy object: Maybe it is not step 44 that wants to vary but the whole algorithm. You have a well-defined job, something that needs to get done, but there are a lot of ways to do it. You might need to remove the outer covering from a feline creature, and there is more than one technique you might employ. You might want to wrap those techniques—those algorithms—in a Strategy object. Observer Pattern: What if you have a class A, which needs to know what is happening over there in class B? But you don’t want to couple the two classes together because you never know when class C (or even class D!) might come along. You might want to consider using the Observer pattern. Composition Pattern: Sometimes you need to treat a collection of objects just like a single object—I can delete or copy or move an individual file, but I can also delete or copy or move a whole directory of files. If you need to build a collection of objects that looks just like one of the individual objects, you probably need the Composite pattern. Iterator Pattern: Now suppose you are writing some code that hides a collection of objects, but you don’t want the collection hidden too well: You would like your client to be able to access the objects in your collection in sequence without knowing how or where you have stored those objects. You definitely need the Iterator pattern. Command Pattern: Sometimes we need to wrap instructions in a kind of a postcard: Dear database, when you get this, delete row number 7843. Postcards are hard to come by in code, but the Command pattern is tailor made for this situation. Adapter: What do you do when an object does what you need it to do, but its interface is wrong? Your interface mismatch might be very deep and complex, or it might be as simple as needing an object that can write but having an object that calls it save. The GoF would recommend an Adapter to you. Proxy: Maybe you have the right object, but it is over there, someplace else on the network, and you don’t want the client code to care about its location. Or perhaps you want to delay creating your object as long as possible, or control access to it. In this circumstance, you may need a Proxy. Decorator: Sometimes you need to add responsibilities to your objects on the fly, at runtime. If you have a need for objects that implement some core capabilities but must sometimes take on additional responsibilities, perhaps you need the Decorator pattern. Singleton: Perhaps you have an instance of a class, and it needs to be the only instance of that class—that is, the single instance that everybody uses. Sounds like you have a Singleton. Factory Method: Now suppose you are writing a base class, one that is meant to be extended. As you are happily coding away at your base class, you realize that it needs to produce a new object and only the subclass will know exactly which kind of object to produce. You may need a Factory Method here. Abstract Factory: How do you create families of compatible objects? Suppose you have a system that models various types of cars, but not all engines are compatible with all fuel or cooling systems. How do you ensure that you don’t end up with the automotive equivalent of Frankenstein’s monster? You might build a class devoted to creating all of those objects and call it an Abstract Factory. Builder: Perhaps you are building an object so complex that its construction requires a significant bit of code. Even worse, the process of construction needs to vary according to the circumstances. Perhaps you need the Builder pattern? Interpreter: Ever have the feeling that you are using the wrong programming language to solve your problem? As crazy as it sounds, perhaps you should stop trying to solve your problem directly and build an Interpreter for a language that solves your problem more easily. Chapter 3. Verying the Algorithm with the Template MethodThought: Separate the things that stay the same. Template Method Patterm Example, hook methods: Templates in the WildWEBrick, 跑一个httpserver用到了Template，可以overrite run method。 Chapter 4. Replacing the Algorithm with the Strategy加入了Strategy对象来描述 Strategy 就指得是一些知道how to do something的executable code。就像Proc(&amp;proc_variable)就像sort的使用就用的是Strategy Pattern，穿进去Proc知道怎么排序 Ruby rdoc 用的就是Strategy Pattern Strategy in the WildRuby 中rdoc用Strategy Pattern来定义显示format Chapter 5. Keeping up with the Times with the ObserverCore Challenge: building a system that is highly integrated that a system where every part is aware of the sate of the whole.P.104 Explain the observer module Observer in the WildActiveRecord::Observer中用Observer来观察database records，created，read，written and deleted。 Chapter 6. Assembling the Whole from the Parts with the CompositeCore Challenge: build up bigger objects from small sub-objects, which might themseleve be made up of still smaller sub-sub-objects. Sprucing Up the Composite with OperatorsIt turns out that we can get this done by simply renaming the add_sub_task method:12345678910111213composite = CompositeTask.new(‘example’)composite &lt;&lt; MixTask.newdef &lt;&lt;(task) @sub_tasks &lt;&lt; taskenddef [](index) @sub_tasks[index]enddef []=(index, new_value) @sub_tasks[index] = new_valueend An Inconvenient DifferenceHow to handle the difference between the leaf and the composite: leaf和composite不一样，addChild，deleteChild这样的方法leaf没有 leaf也加入这两种方法，但是如果被调用了怎么响应是个问题，ignore，exception，还是怎么样？ 最容易犯的问题：Mistake：容易把Composite当成one level deeper，但实际上，composite是multiple levels的。 Composites in the Wild在Ruby中，GUI libraries就是基于Composite Pattern实现的。 Chapter 7. Reaching into a Collection with the IteratorCore Challenge: allows an aggregate object to provide the outsite wolrd with a way to access its collection of subobjects. External IteratorsJava’s iterator is external iterator, ‘external’- a separate object from the aggregate Internal IteratorsRuby’s iterator, inside the aggregate object, the code block-based iterators. The Inimitable Enumerable要实现iterator在ruby中，一般就include Enumerable方法，有了，覆盖each和&lt;=&gt;方法。包括方法：all?, any?, include? … Using and Abusing the Iterator PatternMistake: What happens if the aggregate object changes while you are iterating through it? Iterators in the WildRuby的各种each method IO object，File.open(), Pathname.new，都是很好的iterator ObjectSpace module each_object 显示interpreter中的所有object。1ObjectSpace.each_object &#123; |o| puts “Object: #&#123;o&#125;” &#125; Chapter 8. Getting Things Done with CommandsCore Challenge: an instruction to do something, something specific when something happens. Using and Abusing the Command PatternThe key thing about the Command pattern is that it separates the thought from the deed. When you use this pattern, you are no longer simply saying, “Do this”; instead, you are saying, “Remember how to do this,” and, sometime later, “Do that thing that I told you to remember.”用的太频繁，本来很简单的内容用pattern去实现了。 The Command Pattern in the WildActiveRecord Migrations, up, down, change, Madeleine Chapter 9. Filling in the Gaps with the AdapterCore Chanllenge: bridge the gap between mismatching software interfaces. Ruby 运行时修改类和对象来创建adapter。 Adapter就是用来帮你给你要用的和你有的interface搭桥的。 Ruby中可以对实例添加方法的实例： 12345678910111213141516171819bto = BritishTextObject.new(‘hello’, 50.8, :blue)class &lt;&lt; bto def color colour end def text string end def size_inches return size_mm/25.4 endenddef bto.color colourenddef bto.text stringend Using and Abusing the Adapter PatternIt’s hard to call a method client decided but you didn’t think you needed.我很奇怪这个问题在哪里。 Adapters in the WildActiveRecord, AbstractAdapter 用来解决数据库的adapter的问题。 Chapter 10. Getting in Front of Your Object with a ProxyCore Chanllenge: controll access to an object or providing a location-independent way of getting at the object or delaying its creations. Protection proxy 可以把check安全性的和功能性的放到一个class里面，这样以后容易修改。 RPC system soap/wsdl get weather information. Message passingmethod_missing(:symbol__name, *args), 方法名和参数 Using and Abusing ProxiesAs method_missing is slow and obsure for the code. Proxies in the WildRuby SOAP, Ruby package method1234567891011class MathService def add(a, b) return a + b endendrequire ‘drb/drb’math_service=MathService.newDRb.start_service(“druby://localhost:3030”, math_service)DRb.thread.join client part:123456require ‘drb/drb’DRb.start_servicemath_service = DRbObject.new_with_uri(“druby://localhost:3030”)sum=math_service.add(2,2) Wrapping Up Pattern主要解决的三个问题： 保护对象，授权通信 protection proxy 隐藏对象在其他地方 remote proxy 延迟创建复杂对象 virtual proxy Chapter 11. Improving your objects with a decoratorCore Chanllenge: add an enhancement to an existing object. 12writer = CheckSummingWriter.new(TimeStampingWriter.new(NumberingWriter.new(SimpleWriter.new(‘final.txt’))))writer.write_line(‘Hello out there’) extend Forwardable module for delegating the methods(use extend to add class-level methods)12345678910require ‘forwardable’class WriterDecorator extend Forwardable def_delegators :@real_writer, :write_line, :rewind, :pos, :close def initialize(real_writer) @real_writer = real_writer endend Using and Abusing the Decorator Pattern harder to debug, different decorator class, multiplying the number of objects floating around in your program创建对象太多了。 Decorators in the WildActiveRecord 中有个alias_method_chain, 可以改变老的方法的名字，和新的进行置换。链式修改，在所有修改装饰之后才调用开始类的输出。 Chapter 12. Making sure there is only one with the Singleton Core Chanllenge: there are some things that are unique. 实现Singleton的三种方法： include singleton module Global variable and constant technique class as singleton Module as singleton Singleton: 只有一个、全局可用的实例 @@variable for the class cariable. Java中是static def self.method for the class method. Ruby里面Singleton的使用过程，include之后，直接用SimpleLogger.instance得到唯一值123456require ‘singleton’class SimpleLogger include Singleton # Lots of code deleted...end Using and Abusing the Singleton Pattern How many of the singletons needed? Singletons on a need-to-know basis Cure the Testing Blues. As singleton called by multiple class, there will be a lot independence. Singletons in the Wildrake, Inflections(单复数的), are singletons Chapter 13. Picking the Right Class with a FactoryCore Challenge: How to pick the right class for the circumstance? It just likes the templete pattern, share a common type. Because they implement a common set of methods. Parameterize Factory MethodsGive many parameters to the factory methods, use case switch to define which class to call. Pond Example:123456789101112131415161718192021222324252627282930313233class Pond def initialize(number_animals, animal_class, number_plants, plant_class) @animal_class = animal_class @plant_class = plant_class @animals = [] number_animals.times do |i| animal = new_organism(:animal, “Animal#&#123;i&#125;”) @animals &lt;&lt; animal end @plants = [] number_plants.times do |i| plant = new_organism(:plant, “Plant#&#123;i&#125;”) @plants &lt;&lt; plant end end def simulate_one_day @plants.each &#123;|plant| plant.grow&#125; @animals.each &#123;|animal| animal.speak&#125; @animals.each &#123;|animal| animal.eat&#125; @animals.each &#123;|animal| animal.sleep&#125; end def new_organism(type, name) if type == :animal @animal_class.new(name) elsif type == :plant @plant_class.new(name) else raise “Unknown organism type: #&#123;type&#125;” end endend An object dedicated to creating a compatible set of objects is called an abstract factory.一个用来创建一堆对象的对象:Abstract Factory 12345678910111213141516171819202122232425262728293031323334.class PondOrganismFactory def new_animal(name) Frog.new(name) end def new_plant(name) Algae.new(name) endendclass JungleOrganismFactory def new_animal(name) Tiger.new(name) end def new_plant(name) Tree.new(name) endendclass Habitat def initialize(number_animals, number_plants, organism_factory) @organism_factory = organism_factory @animals = [] number_animals.times do |i| animal = @organism_factory.new_animal(“Animal#&#123;i&#125;”) @animals &lt;&lt; animal end @plants = [] number_plants.times do |i| plant = @organism_factory.new_plant(“Plant#&#123;i&#125;”) @plants &lt;&lt; plant endend In the same way that the Factory Method pattern is really the Template Method pattern applied to object creation, so the Abstract Factory pattern is simply the Strategy pattern applied to the same problem. Using and Abusing the Factory PatternsBalance the cost of the additional. Factory Patterns in the WildActiveRecord::Base use Factory Pattern to map the database connection. Chapter 14. Easier Object Construction with the BuilderCore Chanllenge: a pattern designed to help you configure those complex objects. Polymorphic BuildersBuilder 更关注怎么configure object而不是pick right class。 通过method_missing方法，支持，例如add_trubo_adn_dvd_and_harddisk这样的方法1234567891011def method_missing(name, *args) words = name.to_s.split(“_”) return super(name, *args) unless words.shift == ‘add’ words.each do |word| next if word == ‘and’ add_cd if word == ‘cd’ add_dvd if word == ‘dvd’ add_hard_disk(100000) if word == ‘harddisk’ turbo if word == ‘turbo’ endend Using and Abusing the Builder Pattern不太复杂的事情结果用Builder造成complex。 Builders in the WildMailFactory in ruby, config the mail and send it. Chapter 15. Assembling your system with the interpreterCore Chanllenge: need an interpreter for a domain problem. What kind of problems are good candidates for the Interpreter pattern? As a general rule, problems well suited to the Interpreter pattern tend to be selfcontained, with crisp boundaries around them. For example, if you are writing code that searches for specific objects based on some specification, you might consider creating a query language.1 Conversely, if you are faced with the task of creating complex object configurations, you might think about building a configuration language. Another clue that your problem might be right for the Interpreter pattern is that you find yourself creating lots of discrete chunks of code, chunks that seem easy enough to write in themselves什么问题需要Interpreter Pattern呢？ 当这个问题可以被更小的边界包含的时候，例如需要对特殊对象的查询，query language，需要复杂配置，configuration language。 另一个是，你发现有很多离散的可重复代码块。 Building an Interpreter AST: abstract syntax tree. If the language is fairly complex and neither XML nor YAML seems appropriate, using a parser generator Racc. Using and Abusing the interpreter Pattern The complexity issure, how complex your language will be. Program efficiency. good choice for 80% code that really is performance insensitive. Interpreters in the wildRegular Expression for string matching. Runt: expressing things like date and time ranges and schedules. Chapter 16. Opening Up Your System with Domain-Specific LanguagesCore Chanllenge: provider the language that used by the users. Using and Abusing the DSL error message is unfriendly. If security is an issue, stay away from internal DSLs. Internal DSLs in the Wildrake, task based on tasks. Chapter 17. Creating Custom Objects with Meta-programmingCore Chanllenge: Change the functionality in the runtime. Use extend for the object insludes some module.对象mix Module用extend，class包含module用include。 The subclasses of Base do not automatically inherit any Composite pattern behavior. Instead, they inherit the member_of and composite_of class method to add the composite methods to the subclass. Using and Abusing Meta-programmingMeta-programming: writing programs that augment or change themseleves as they run.The key danger is the unexpected interaction between features. Meta-programming in the Wildattr_reader, attr_writer, attr_accessor. The three are meta-programming. like: 123456789101112131415161718class Object def self.readable_attribute(name) code = %Q&#123; def #&#123;name&#125; @#&#123;name&#125; end &#125; class_eval(code) endendclass BankAccount readable_attribute :balance def initialize(balance) @balance = balance endend Forwardable module to delegae the methods. Chapter 18. Convention Over ConfigurationCore Chanllenge: How to make software systems extensible via configuration. Convention focuses to making it wasy to add adapters. Some constraints on the adapter. Using and Abusing the Convention Over Configuration Pattern The convention might be incomplete. hard to write and no documentation for the operational road map. Chapter 19. Conclusion","tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"metaprogramming","slug":"metaprogramming","permalink":"http://yoursite.com/tags/metaprogramming/"},{"name":"design pattern","slug":"design-pattern","permalink":"http://yoursite.com/tags/design-pattern/"}]},{"title":"Practical Obect Oriented Design in Ruby","date":"2015-07-16T15:54:10.000Z","path":"2015/07/16/practical-obect-oriented-design-in-ruby/","text":"Practical Object-Oriented Design in RubyResponsibilities, dependencies, interfaces, ducks, inheritance, behavior sharing, composition, and testing Persist. Practice. Experiment. Imagine. Do your best work, and all else will follow. Question Information Inject Dependency 为了single responsbility， 怎么做ID来减少依赖 Direct of Dependency 当不能见到dependency的时候依赖该怎么设计，改变可能性和类的耦合性 Interface Design public的interface的设计过程，需要对messages的理解 Duck Type 选好duck type Inheritance 继承要很好的Abstract和message的理解，继承实际上就是把父类message delegate到子类去 hook methods 解耦合的很好的办法,initialize()和post_initialize()的关系,post_initialize就是hook Liskov Substitution Principle 父类能做的，子类都能做，一个role的内容，include的class都能做 OOD problem: Without design pattern. With a little knowledge of design pattern, overdesign. “ No, I can’t add that feature; it wasn’t designed to do that.” Without the act of programming. Design pattern is relying on the feedback loop. SOLID:Single Responsibility( Transparent, Reasonable, Usable and Exemplary), reuse and maintain.If you rephrase everyone of its methods as a question, asking the question ought to make sense. For example,“Please Mr. Gear, what is your ratio?” If the simplest description you can devise uses theword “and,” the class likely has more than one responsibility. If it uses the word “or,”then the class has more than one responsibility and they aren’t even very related.OO designers use the word cohesion to describe this concept. When everything in a37class is related to its central purpose, the class is said to be highly cohesive or to have asingle responsibility.P.37 Do not feel compelled to make design decisions prematurely. What is the future cost of doing nothing today?” Always wrap instance variables in accessor methods instead of directly referring to variables. In a method use variable instead of @variable. As in the future, variable may be overrided a new function. P41 Struct as “a convenient way to bundle a number of attributes together, using accessormethods, without having to write an explicit class.” This is exactly what wheelifydoes; it creates little lightweight objects that respond to rim and tire. Separating iteration from the action that’s being performed on each element is a common case of multiple responsibility that is easy to recognize. Chapter 3. Managing DependenciesAn object has a dependency when it knows• The name of another class. Gear expects a class named Wheel to exist.• The name of a message that it intends to send to someone other than self.Gear expects a Wheel instance to respond to diameter.• The arguments that a message requires. Gear knows that Wheel.new requiresa rim and a tire.• The order of those arguments. Gear knows the first argument to Wheel.newshould be rim, the second, tire. One especially destructive kind of dependency occurs where an object knows another who knows another who knows something; that is, where many messages are chained together to reach behavior that lives in a distant object. The code above exposes an unjustified attachment to static types. dependency injection P.54 Dependencies are foreign invaders that represent vulnerabilities, and they should be concise, explicit, and isolated. This new method lazily creates a new instance of Wheel, using Ruby’s||= operator. In this case, creation of a new instance of Wheel is deferred until gear_inches invokes the new wheel method. P.55 Remove Argument-Order Dependencies When the code in line 11 changed to use a hash, it lost its ependency on argument order but it gained a dependency on the names of the keys in the argument hash. This change is healthy. The new dependency is more stable than the old, and thus this code faces less risk of being forced to change. In the example below, line 3 uses fetch to set @chainring to the default, 40, only if the :chainring key is not in the args hash. Setting the defaults in this way means that callers can actually cause @chainring to get set to false or nil, something that is not possible when using the || technique. P.61 use merge to merge the array list.3 ways: || Hash.fetch Hash.merge The above technique for substituting an options hash for a list of fixed-order arguments is perfect for cases where you are forced to depend on external interfaces that P.62 you cannot change. Reversing Dependencies改变dependency的方向：Page 62 give an example on dependencie directions. Choosing Dependency Directions Some classes are more likely than others to have changes in requirements. Concrete classes are more likely to change than abstract classes. Changing a class that has many dependents will result in widespread consequences Class Type Likelihood of Change Ruby base classes not changed framework classes may rapid or none based on the development Abstractions classes less change Concretion classes more change In statically typed languages defining an interface is always intentional. But as Duck type, it’s just message in Ruby. Zone A contain abstract classes or interfaces, suggested.Zone C prefer the concrete classes, as few classes depend on them.Zone B is fine always.Zone D is Danger Zone, delete them. SummaryDependency management is core to creating future-proof applications. Injecting dependencies creates loosely coupled objects that can be reused in novel ways.Isolating dependencies allows objects to quickly adapt to unexpected changes. Depending on abstractions decreases the likelihood of facing these changes.The key to managing dependencies is to control their direction. The road to maintenance nirvana is paved with classes that depend on things that change less often than they do. Chapter 4. Creating Flexible InterfacesThe remainder of this chapter will address the first kind of interface, that is, methods within a class and how and what to expose to others. Public:• Reveal its primary responsibility• Are expected to be invoked by others• Will not change on a whim• Are safe for others to depend on• Are thoroughly documented in the tests Private:• Handle implementation details• Are not expected to be sent by other objects• Can change for any reason whatsoever• Are unsafe for others to depend on• May not even be referenced in the tests Nouns is for domain objects.Messages need to be considered much more. Using sequence diagrams, from P. 72 it explains about the sequence diagrams design. When the conversation between Trip and Mechanic switched from a how to a what, one side effect was that the size of the public interface in Mechanic was drastically reduced.P.80 很好的解释了Trip的各种关系。Mechanic需要prepare_trip, prepare_bicycle接口，Trip需要bicycles接口 If objects were human and could describe their own relationships, in Figure 4.5 Trip would be telling Mechanic: “I know what I want and I know how you do it;” in Figure 4.6: “I know what I want and I know what you do” and in Figure 4.7: “I know what I want and I trust you to do your part.” This blind trust is a keystone of object-oriented design. It allows objects to collaborate without binding themselves to context and is necessary in any application that expects to grow and change. Law of DemeterOne common way to remove “train wrecks” from code is to use delegation to avoid the “dots.” In object-oriented terms, to delegate a message is to pass it on to another object, often via a wrapper method. Focusing on messages reveals objects that might otherwise be overlooked. When messages are trusting and ask for what the sender wants instead of telling the receiver how to behave, objects naturally evolve public interfaces that are flexible and reusable in novel and unexpected ways. Chapter 5. Reducing Costs with Duck Typing1234567891011121314151617class Trip attr_reader :bicycles, :customers, :vehicle def prepare(preparers) preparers.each &#123;|preparer| case preparer when Mechanic preparer.prepare_bicycles(bicycles) when TripCoordinator preparer.buy_food(customers) when Driver preparer.gas_up(vehicle) preparer.fill_water_tank(vehicle) end &#125; endend 这种设计会导致很多dependency，因为都要知道相应的class name。用duck type的新设计。12345678910111213class Trip attr_reader :bicycles, :customers, :vehicle def prepare(preparers) preparers.each &#123;|preparer| preparer.prepare_trip(self)&#125; endendclass Mechanic def prepare_trip(trip) trip.bicycles.each &#123;|bicycle| prepare_bicycle(bicycle)&#125; endend There are a number of ways to achieve polymorphism; duck typing, as you have surely guessed, is one. Inheritance and behavior sharing (via Ruby modules) are others, but those are topics for the next chapters. You can replace the following with ducks:• Case statements that switch on class• kind_of? and is_a?• responds_to? “I know who you are and because of that I know what you do.” This knowledge exposes a lack of trust in collaborating objects and acts as a millstone around your object’s neck. It introduces dependencies that make code difficult to change. Place trust in your ducks Documenting Duck Type by test Sharing code between ducks Choosing your ducks wisely 选好duck type，有时候依赖的是stable的class，例如core class，就可以不考虑duck type 他 Chapter 6. Acquiring Behavior Through inheritanceThe idea of inheritance may seem complicated but as with all complexity, there’s a simplifying abstraction. Inheritance is, at its core, a mechanism for automatic message delegation. 继承也不是随便用的，Abstraction才是父类，Template Method Pattern也要用好，注意default value和抛出异常的情况。 1234567891011121314151617181920class Bicycle def spares &#123; tire_size: tire_size, chain: chain&#125;.merge(local_spares) end def local_spares &#123;&#125; endendclass RoadBike &lt; Bicycle def local_spares &#123;tape_color: tape_color&#125; endend 这种方法decouple了subclass实现，同时也调用了父类的实现。Well-designed inheritance hierarchies are easy to extend with new subclasses, even for programmers who know very little about the application. This ease of extension is inheritance’s greatest strength. When your problem is one of needing numerous specializations of a stable, common abstraction, inheritance can be an extremely lowcost solution. Chapter 7. Sharing Role Behavior with ModulesModules is also a kind of implementation of inheritance. This chapter explores an alternative that uses the techniques of inheritance to share a role. It begins with an example that uses a Ruby module to define a common role and then proceeds to give practical advice about how to write all inheritable code. Schedule is a role, schedulable? is the message. It should be in the targets. 123456789101112131415161718192021module Schedulable attr_writer :schedule def schedule @schedule ||= ::Schedule.new end def schedulable?(start_date, end_date) !scheduled?(start_date - lead_days, end_date) end def scheduled?(start_date, end_date) schedule.scheduled?(self, start_date, end_date) end # includers may override def lead_days 0 endend If a module sends a message it must provide an implementation, even if that implementation merely raises an error indicating that users of the module must implement the method. This chapter has been careful to maintain a distinction between classical inheritance and sharing code via modules. This is-a versus behaves-like-a difference definitely matters, each choice has distinct consequences. However, the coding techniques for these two things are very similar and this similarity exists because both techniques rely on automatic message delegation. Liskov Substitution Principle (LSP) When you honor the contract, you are following the Liskov Substitution Principle, which is named for its creator, Barbara Liskov, and supplies the “L” in the SOLID design principles. Following this principle creates applications where a subclass can be used anywhere its superclass would do, and where objects that include modules can be trusted to interchangeably play the module’s role. Try to shallow the inheritance, don’t make to deep. 否则hook methods会很难找，而且程序员比较熟悉top和bottom的class，对于中间的很不熟悉。 Modules, therefore, should use the template method pattern to invite those that include them to supply specializations, and should implement hook methods to avoid forcing includers to send super (and thus know the algorithm). Chapter 8. Combining Objects with CompositionComposition 关系图 Bicycle, parts, partsfactory, and part(open struct). Deciding Between Inheritance and CompositionBenefits of InheritanceCost of Inheritance Benefits of Composition: composition results in applications built of simple, pluggable objects that are easy to extend and change.Cost of Composition: not obvious of the combined operation. Relationship Description Inheritance is-a module duck type behave like a Composition has-a Chapter 9. Designing Cost-Effective TestsRefactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves the internal structure. Finally, the art of writing changeable code requires the ability to write high-value tests. Tests give you confidence to refactor constantly. Efficient tests prove that altered code continues to behave correctly without raising overall costs. 这里面有很好的关于wheel，gear的测试设计。单元测试，Mock, write the test module for sharing functionality.","tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"ood","slug":"ood","permalink":"http://yoursite.com/tags/ood/"}]},{"title":"a endless journey to learn vim","date":"2015-07-10T14:12:52.000Z","path":"2015/07/10/a-endless-journey-to-learn-vim/","text":"This description to the VIM journey is to descript my learning process of VIM: #开始通过看thoughtbot的vim教学视频学习怎么配置好vim的工作环境，玩vim adventure。第一部基本学会的内容： motion在一个文件中 vim中的letter，word，sentence，paragraph的概念 配置vim config文件选择template，颜色 掌握常用的：command 三种mode熟练切换 VIM keystrokes的评价体系：VImGolf按了几个键，Repitation容不容易repete,undo 时候是否和计划的一样, keep a lean undo/redo history习惯用o来取代因为undo会根据最近的change。用思想来切换mode，如果信息输入完了，应该习惯切回normalvim的熟练过程开始是熟悉keystoke，之后要有逻辑，motion和change分开，可以repeat motion或者change，DRY。VIM思想Pattern VIM Pattern 描述 Dot Formula One Keystroke to move, one keystroke to execute Series or Parallel 例如可以22@q的方式去修改，亦可以VG:&lt;,&gt;normal @a的方式parallel修改 ##掌握不好的地方： Normal下操作的互动 Visual下的互动命令 :h 的使用不熟练，找不到想要的帮助内容 :set 的内容不了解具体效果 VIM mode Mode 功能描述 Normal 操作 Insert write Visual choose Insert Normal mode +normal keystroke Operator-pending mode dw,between d and w can be customized Replace replace the char Char[line,block]-wise Visual mode v,V, enter diff visula mode ##开始容易掌握的操作： $,), g, G, iao, IOA, v, n, &lt;&gt; d, y, c, u, C-r, x hjkl, f, t ##开始掌握不好的操作： normal Mode：=, `, q, ;, . , r Ex Mode: Q, ebw, HL, {}, C-i, C-o illustion keystroke 描述 ; 重复之前的f或者t motion操作 . 重复最近的change操作 &amp; 重复最近的:substitutecommand , reverse ; 的结果，但远程有点慢 ? for preview match * Search forward for cursor word = Autoindent ! filer {motion} lines by external program insert mode delete back one word insert mode delete back to start of line insert mode delete back one char 进入Insert-Normal mode 0 insert mode paste from yunk and keep in one undo V: o toggle the free end 进入Visual-Block mode 可以多行一起输入 “ayy; “ap copy into the register a, put from register a yy; “0p; :reg “0 yank always copy into reg 0 ”_; “+; “* black hole reg, system clipboard, selection reg #重要的Plugin： Easymotion：很方便的motion的插件非常给力。 (easymotion-sn), s, t, /, NERDCommenter: 快速注释 c, [count]cc Tabulize: 样式对齐, a:: 功能是:Tabulaize \\:zs 以:后面的内容对齐 ctags：右侧显示函数树 b NERDTree: 左侧的文件夹结构树 : toggle nerdtree #熟练地Ex Commands| ExCommands | 描述 || — | — || :grep searchstring | 功能上就是$ grep -n searchstring || :2,5p | print echo the lines from line 2 to 5 || ://+1,//-1d | delete body tag 之间的行 || :join | join without motions || :%s/Practical/Pragmatic | 全文替代% is the file || :normal {command} | … || :6t. | :[range]copy {address} duplicate one or more lines || :m | move lines || :colorscheme | show all options for the command || : | get the current word under cursor || :2,$!sort -t’,’ -k2 | sort current file by second column || :reg | show all registers info | Keystrokes 描述 vit 功能上是选择html之间的内容 ci( 功能上是去掉()之间的内容进入insert mode &gt;G indent从cursor到end of file的位置 @: 重复之前的Ex command daw delete a word, 可以从后到前的word去掉space [v]as in visual mode choose a sentence gv reselect the last visual selection gj,gk,g0,g^,g$ move down and up by display lines ge backward to the end of word, reverse of e #VIM 启动命令| Commands | 描述 || — | — || vi -u NONE N | -u NONE 指定不用vim渲染，N：set nocompatable提供vim功能 | #VIM Powerful Customize| Customize | 描述 || — | — || omap-info | 可以修改motions的key | #经典Examples：关于Ex Command的图表Text Objects Table #Tips| Tips | 描述 || – | – || qq,22@q | 因为q好按所以放到reg q中，因为2和@是一个键，所以重复多次的时候可以用22 |","tags":[{"name":"vim","slug":"vim","permalink":"http://yoursite.com/tags/vim/"}]},{"title":"Rspec for Test in Ruby","date":"2015-07-02T15:15:13.000Z","path":"2015/07/02/rspec-for-test-in-ruby/","text":"Excel for summary of ruby test make sure install the rspec gem Use “rspec file_name.rb” to run the rspec test Tips: already use expect syntax to instead of the should syntax.","tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"rspec","slug":"rspec","permalink":"http://yoursite.com/tags/rspec/"},{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"}]},{"title":"Ruby C Python C++ world Tips","date":"2015-06-24T20:08:31.000Z","path":"2015/06/24/ruby-c-python-c-plus-plus-world-tips/","text":"Create the Ruby extension in C里面清晰地讲明了怎么给Ruby写C的extension。require mkmf, create makefile, create the extension","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"c","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"},{"name":"tips","slug":"tips","permalink":"http://yoursite.com/tags/tips/"}]},{"title":"Rails development ridiculous problem sets","date":"2015-06-23T14:15:58.000Z","path":"2015/06/23/rails-development-ridiculous-problem-sets/","text":"Ridiculous Problem 1: Situation: I use paperclip gem to provide the file upload functionality, after I use it the view render problems. Solution: The problem is in the Model referral, it influence the controller process. Tips: Pay attention to the stack of the Rails report, the model-controller-view. 有些时候Exception，rails报错的标题是主要问题，有时候，描述是主要的问题，举例： Rails:3.2.19 当我把index方法删除，view,index.html.erb里面有bug的时候，exception会报出NoMethodError指向Controller里面，描述里面报出view里面的问题，index方法是可以默认没有的。 当model里面出现问题，exception标题指向controller，描述里堆栈指向了model里面。exception一般都会报controller的问题，要看清描述，描述的堆栈是从上到下看。用better errors，gems更好的进行项目开发调试。better errors里面的Application Frames提供了应用框架的问题。All Frames里面提供了查看所有其他gem的机会。BetterErrors::Middleware.allow_ip! ‘10.0.80.2/24’ Pry Bug:pry tab bug$ pry to locate the pry.rb file pathmodify the pry.rb file require ‘strscan’","tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"development","slug":"development","permalink":"http://yoursite.com/tags/development/"},{"name":"problem","slug":"problem","permalink":"http://yoursite.com/tags/problem/"}]},{"title":"linux command learn tips","date":"2015-06-15T19:31:22.000Z","path":"2015/06/15/linux-command-learn-tips/","text":"awk强大的文件操作，从Alfred Aho，Peter Weinberger and Brain Kernighan找出非系统产生的账号：12awk -F “:” ‘($3 &gt;= 1000) &#123; printf $1 “\\n”&#125;’ /etc/passwdawk Pattern &#123;ACTIONS;&#125;awk中仅有string和numeric，可以互相转换。文件中每一行check每一种pattern（Regex，Boolean，Special）,In Boolean Search,进行fuzzy matching，” 23”==23 ack, awk, grep git 25 tips useful But a little long 查看当前服务器的运行级别。12runlevelwho -r 找到/usr下面大于10M的文件，找到120天之前被修改过的文件. 找出90天内未被访问过的文件。12345find /usr -size +10Mfind /home -mtime +120find /home \\! -atime -90 alias 设置别名，方便以后使用。1alias ls=ls -al 工作流程控制的几个命令：123456789101112131415jobs [-lp] [job]bg [job]fg [job]kill [-signal] job..wait [job..]%number: refer to job by number%string: job whose name begins with string%?string: job whose name contains string%+ or %%: current job%-: previous jobbg show all jobs in the backendfg %2 put the 2 in the frontjobs show all jobs ENV NAME MEANING $HISTCMD the history number of the current command $HISTSIZE number of remembered commands $HOME login directory $MAIL absolute path of mailbox $OLDPWD absolute path of previous directory $PATH command search path $PPID process ID of parent $PS1 primary prompt 1 $RANDOM generate random number $SECONDS number of seconds since shell started $SHELL absolute path of shell $UID user ID of the current user $$ process ID of current shell $? exit status of most recent statement $# number of the argruments $x all the arguments $! PID of the moust recent background job shell if 语句，testing[]里面是判断，-a是and，-o是or，-e是equal，-z是zero，-n不是zero1234if [ $DEBUG -eq 1]; thenelif [ -f /etc/passwd ]; thenelsefi","tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"User ionic to create ios native app","date":"2015-06-11T20:00:10.000Z","path":"2015/06/11/user-ionic-to-create-ios-native-app/","text":"ionic ionic integrate the nodejs, cordova, ios-sim together.I tried to install, build and emulate the app from tips on the ionic website. But it doesn’t work. The problem is ionic can’t launch the app in the simulator. After trying different solutions, like kill -9 the apple coresimulator process…I use ios-sim to launch the app project.1ios-sim launch ./platforms/ios/build/emulator/myApp.app Cool Let me play in the ionic world.","tags":[{"name":"ios","slug":"ios","permalink":"http://yoursite.com/tags/ios/"},{"name":"ionic","slug":"ionic","permalink":"http://yoursite.com/tags/ionic/"},{"name":"cordova","slug":"cordova","permalink":"http://yoursite.com/tags/cordova/"},{"name":"ios-sim","slug":"ios-sim","permalink":"http://yoursite.com/tags/ios-sim/"}]},{"title":"Integrate solar search sunspot with rails","date":"2015-06-04T18:12:49.000Z","path":"2015/06/04/integrate-solar-search-sunspot-with-rails/","text":"Sunspot Github rails g sunspot_rails:install只安装了config/sunspot.yml文件进行配置 gem ‘sunspot_solr’rake sunspot:solr:start(stop)安装完了以后开启solr服务，这样在development过程中可以用solr，用完stop服务。rake sunspot:solr:reindex新加了search属性，就要重新index数据. 会引起问题的写法，问题：会显示前一次的结果，不显示这一次的。主要是response的更新时间1234567891011121314151617$(\"#top_search\").autocomplete(&#123; source: (request, response) -&gt; send_ajax_request('/home/search_anything', &#123;'top_search': request.term&#125;, (data)-&gt; root.search_results = data ) response( $.map( root.search_results, (item) -&gt; &#123; label: item.label, value: item.value &#125; )) , select: (event, ui)-&gt; autocomplete_update_lable(event, ui, 'top_search', 'choosen_search_result') , focus: (event, ui)-&gt; autocomplete_update_lable(event, ui, 'top_search', 'choosen_search_result') #, appendTo: \"#modal-content\"&#125;) 修改后的代码： 1234567891011121314151617$(\"#top_search\").autocomplete(&#123; source: (request, response) -&gt; send_ajax_request('/home/search_anything', &#123;'top_search': request.term&#125;, (data)-&gt; root.search_results = data response( $.map( root.search_results, (item) -&gt; &#123; label: item.label, value: item.value &#125; )) ) , select: (event, ui)-&gt; autocomplete_update_lable(event, ui, 'top_search', 'choosen_search_result') , focus: (event, ui)-&gt; autocomplete_update_lable(event, ui, 'top_search', 'choosen_search_result') #, appendTo: \"#modal-content\"&#125;) rotate css 写法： 12style:-webkit-transform: rotate(-25deg); 如果在layout里面想调用的方法，把方法放到controller的folder里面，在里面建一个文件，用来存rb文件Include method in controller Attribute Can’t be Accessible","tags":[{"name":"search","slug":"search","permalink":"http://yoursite.com/tags/search/"},{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"solar","slug":"solar","permalink":"http://yoursite.com/tags/solar/"},{"name":"sunspot","slug":"sunspot","permalink":"http://yoursite.com/tags/sunspot/"}]},{"title":"Integrate nginx and socket io with rails","date":"2015-06-04T18:12:29.000Z","path":"2015/06/04/integrate-nginx-and-socket-io-with-rails/","text":"","tags":[]},{"title":"Ruby AJAX modal to show the form","date":"2015-06-02T19:43:09.000Z","path":"2015/06/02/ruby-ajax-modal-to-show-the-form/","text":"set the link tag to remote:true in the controller route to set up the connection, respond__to do |format| format.js end use html = ‘&lt;%= escape_javascript render(“filename_withough_underscore”) %&gt;’注意外面是单引号，里面双引号","tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"},{"name":"ajax","slug":"ajax","permalink":"http://yoursite.com/tags/ajax/"},{"name":"modal","slug":"modal","permalink":"http://yoursite.com/tags/modal/"}]},{"title":"Install the OpenERP version 8 ODOO","date":"2015-06-01T18:21:24.000Z","path":"2015/06/01/install-the-openerp-version-8-odoo/","text":"tutorial video This is a very famous framework for the enterprise. Github install script the default port for the web application is 8069The default password: superadminpassword My administrator username is admin. password is password. sudo service odoo-server start to start the odoo server.sudo service odoo-server stop to stop the odoo server. 使用Digital Ocean的旧金山的服务器去建立网站。","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"openerp","slug":"openerp","permalink":"http://yoursite.com/tags/openerp/"},{"name":"odoo","slug":"odoo","permalink":"http://yoursite.com/tags/odoo/"}]},{"title":"Ruby Programmint Recommendation and Tips","date":"2015-05-12T18:39:57.000Z","path":"2015/05/12/ruby-programmint-recommendation-and-tips/","text":"Ruby pryTips:help, ls command Duck typing Object Model metaprogramming tainting package gem document ruby code Part one- Facets of Ruby:Chapter 1- Getting StartedRdoc and ri for Ruby documentation, pry also have the doc, Chapter 2- Ruby.newEvery object has a unique object identifier.Methods are invoked by sending a message to an object. Class Variable: @@totalGlobal Variable: $debugConstant Name: PI Array initialization: a = %w{ test tao zhang xiao}Hash initialization: h = Hash.new(0) for like counting the words Regex: \\s \\d \\w, =~, is match. Block and Iterators: use yield() 反调block中的变量。 Command-Line Arguments: ARGV array, print gets, p Chapter 3- Classes, Objects and Variablesinitialize is the constructor in Ruby.attr-reader, attr-accessor method to provide set and get method.CSV reader. String.dup to duplicate the string object and String.freeze the object, the object can’t be changed. Chapter 4- Containers, Blocks, and IteratorsArrays, can be accessed by the negative index which is calculated from the end.a[1..3], a[1…3] no include the last one, a[-3..-1]shift, pop and push is supported by Array by the default. push+shift=Queue, push+pop=Stack Hash can be indexed by Regex, Symbol and String. Ruby remember insert order of hash when try to iterate it.String.downcase, String.scan search the string to regex. Hash.sort-by {block} Ruby iterator is a method that can invoke a block of code.swap: a,b=b,a, Container.each-with-index, Array.inject(:+) calculate the sum of the array. loop is while(true). block-given? test give block or not.ruby1lambda &#123; p “test” &#125;lambda will create a Proc.new for the block. Chapter 5- Sharing Functionality: Inheritance, Modules, and MixinsInheritance &lt;, mixins include keyword Chapter 6- Standard Types3.times, 1.upto(5), 10.downto(1), 50.step(10,2) iterator generate way. Chapter 7- Regular ExpressionChapter 8- More about MethodChapter 9- Expressionsdefined? check methodComparing objects: ==, ===, &lt;=&gt;(General comparison operator), =~, eql?(same type and equal values) and equal? (same object ID Chapter 10- Exceptions, catch and throwTiding up, begin-rescue-end. Chapter 11- Basic Input and OutputIO Object, File, STDOUT, endl, StringIO, open() Chapter 12- Fibers, Threads, and ProcessesFiber: Fibers let u suspend execution of one part of program and run some other part. Run the code later.Multiple thread, multiple process: split up cooperating tasks. Fiber, Fiber.new, Fiber.yield, Fiber is used for abstractions, like enumerate.Fiber can transfer the control, continuation is a way of recording the state of the running program, like web app request. Multiple thread, green thread by Ruby. Multiple Processes, system(“linux system command”). Chapter 13- Unit TestingTest::Unit::TestCase, assert-equal(), assert-match, assert-empty, assert-same Chapter 14- When Trouble StrikesUse nonbuffered I/O(set sync=true) for debug messages.ruby1num1, num2 = line.split(/,/).map &#123; |val| Integer(val) &#125;has.rehash to rehash the elements in hash, like object hash value.benchmark to test the performance. Part two- Ruby in Its SettingChapter 15- Ruby and Its Worldgem query –details –remote –name-matches buildergem list –all, list all versionsgem environment gemdirgem server, open a gem document server for listing the installed gems. rake developed by Jim Weirich, was initially implemented as a Ruby version of Make. But rake is an automation tool, run tasks.Thor is a tool that makes it easy to write Ruby command-line tools. Chapter 16- Namespace, Source Files, and DistributionMath::E, Math::PI, namespace. Chapter 17- Character EncodingNot too much to talk about that. Chapter 18- Interactive Ruby Shellconf, configuration fo the IRB, Chapter 19- Documenting RubyExplain how to use Rdoc and ri to document the ruby Chapter 20- Ruby and the WebTalk about the CGI: common gateway interface, cookies and sessions, which includes all the lower-level details. Chapter 21- Ruby and Microsoft WindowsDiscuss with about the Win32API, win32ole module. to interact with windows, Windows shell. Part Three- Ruby Crystallized=begin =end is ignored by Ruby and used to comment and docs. Type Meaning %q Single-quoted string %Q, % Double-quoted string %w, %W Array of strings %r Regular expression pattern %s a symbol %x shell command usually %r for regex %w for string array, %x for command, %q for string for multiple lines. Chapter 22- Ruby LanguageBasic Typesnumbers, strings, arrays, hashes, ranges, symbols, regexFixnum to Bignum automatically,String is different in dilimited and substitution.?\\C-a #=&gt; “\\x01”?\\C-d $=&gt; “\\u0004” Ranges: expr..expr like 1..3, expr…expr will exclude the last element. Array: %w only set the words array no substitution, %W will make substitution of individual word. Symbol: In some lang is called atoms and the process is called interning. :”#{a}ello” Regex: /pattern/options, %r{pattern}optionsoptions can be:| Options | Meaning || — | — || i | case insensitive || o | substitute once || m | match new line || x | allow spaces and comments | Variables :P.320 Pattern Matching Variables, Input/Output Variables, Exexution Environment Variables, break, redo and next. {}, Proc, lambda {} Chapter 23- Duck TypingAn object’s type is determined by what it can do, not by its class!! names.map { |name| name.upcase} is equal: names.map(&amp;:upcase), &amp;:upcase will be changed into to_proc of upcase. Chapter 24- MetaprogrammingMetaprogramming, provide the ability to design a new, domain-specific programming language to solve particular problem.P366, A Ruby object has three components: A set of flags some instance variables an associated classself refers to the read-only current objectputs 这种方法的调用过程，从self开始，把self作为method receiver，如果没有方法就继续找他的supperclass，直到最后的BasicObject，如果没有就报错。P.367有详细说明了这个过程。 P.369, 里面讲了怎么给已经有class的ruby object加入他们的method，ruby会让他们继承自一个anonymous class，singleton class，来实现这个方法。ruby1234animal = ‘cat’ def animal.speak puts “The #&#123;self&#125; speaks words”end In ruby the instance variable is created withe the class, not the instance of the class. So use self.val to access to the variables. ruby1234567singleton = class &lt;&lt; animal def lie puts “The #&#123;self&#125; is lying.” end selfendputs singleton.instance_methods - ‘animal’.methods 在ruby中子类修改父类的私有函数，只需要用public :method_name，ruby会建立个新的同名method然后super调用，返回结果。P.376 Ruby中的Modules和Mixins的实现方式就是，用anonymous class的方式来将方法指向module同时super class保持正常，既提供了功能同时，也可以合理的建立super class chain。P.378 24.5 Metaprogramming Class-Level Macros，这一块很爽，讲了关于attr_accessor还有has_many的实现技术。 通过这个方式来创建了add_logging，同时用log方法就可以调用。ruby12345678class Logger def self.add_logging(id_string) define_method(:log) do |msg| now = Time.now.strftime(“%H:%M:%S”) STDERR.puts “#&#123;now&#125;-#&#123;id_string&#125;: #&#123;self&#125; (#&#123;msg&#125;)” end endend Ruby Struct.new(:name, :address, :likes) 可以新建的class只带有attributes，并且可以被&lt; extend 继承。P.384 Class.new的神奇用法,instance_eval 将设置self，直接调用caller的method。9,10小节没有怎么看明白. Chapter 26- locking Ruby in SafeRuby中的safe模式，$SAFE里面存着现在的safe等级从0到4，可以用Object#taint，tainted？，trust来判断object的可信度。 Rails 里面有些ruby没有的内置方法，包括Stirng.to_time, 直接把string转换成时间格式。","tags":[{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"}]},{"title":"Difference between Alibaba","date":"2015-05-11T20:00:01.000Z","path":"2015/05/11/difference-between-alibaba/","text":"Alibaba, strategy is to show the great deals and the trend, there is no any info about setting the sellers. They use beautiful model to attract users’ attention. JD, strategy is to show the great deal by the brand(which has been known by most of users)","tags":[{"name":"e-commerce","slug":"e-commerce","permalink":"http://yoursite.com/tags/e-commerce/"},{"name":"ebay","slug":"ebay","permalink":"http://yoursite.com/tags/ebay/"},{"name":"amazon","slug":"amazon","permalink":"http://yoursite.com/tags/amazon/"}]},{"title":"Leetcode, practise algorithm in ruby","date":"2015-05-06T16:56:46.000Z","path":"2015/05/06/leetcode/","text":"Enumerable, partition, method, partition the enumerable(like array) into two sets, one is true based on the block result.inject(:+), get the sum of the enumerable.","tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://yoursite.com/tags/algorithm/"},{"name":"leetcode","slug":"leetcode","permalink":"http://yoursite.com/tags/leetcode/"},{"name":"ruby","slug":"ruby","permalink":"http://yoursite.com/tags/ruby/"}]},{"title":"Scrapy python web crawling and scrapying for linked","date":"2015-05-06T13:50:17.000Z","path":"2015/05/06/scrapy-python-web-crawling-and-scrapying-for-linked/","text":"","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"scrapy","slug":"scrapy","permalink":"http://yoursite.com/tags/scrapy/"},{"name":"crawl","slug":"crawl","permalink":"http://yoursite.com/tags/crawl/"},{"name":"spider","slug":"spider","permalink":"http://yoursite.com/tags/spider/"}]},{"title":"JQuery and AngularJS","date":"2015-04-20T14:35:49.000Z","path":"2015/04/20/jquery-and-angularjs/","text":"jQuery video tutorial Tips: use $(function(){}); instead of $(document.ready(function({})); $(‘.div’).toggle() instead of show(), hide(), .sideToggle(), .fadeToggle(), .delay(). can use numbers for time in ms. .on(‘click’, function({})); bind the event to the element. DOM traverse method in jQuery, .parent(), .children(), .sibling(), .closet(), great method. AJAX is one of coolest things, use Mustache.js to template the html code for AJAX pending. Angularjs W3C school Tips: ng-app, ng-model, expression the same way as ng-bind, ng-init, set the init value. angular object is like JavaScript object. Angular array is like javascript array. ng-repeat, repead the html elements ng-disabled, use to disable the button or the input filed. ng-show, ng-hide to show or hide the element ng-click,set the click event to the element, check how many times of clicks. BIG PROBLEM: In slim, if I change the name of the ng-app, it will understand as string value. But if I leave the name empty, it works fine. Set the ng-app name to enable the angular set, or you will get the problem: will be outputed as a string","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"angularjs","slug":"angularjs","permalink":"http://yoursite.com/tags/angularjs/"},{"name":"jquery","slug":"jquery","permalink":"http://yoursite.com/tags/jquery/"}]},{"title":"Ruby on Rails Development","date":"2015-04-20T14:06:16.000Z","path":"2015/04/20/ruby-on-rails-development/","text":"Ruby on Rails Development: Redis source documentation Redis tutorialTips: use INCR to make variable increased by 1, it’s atomic command, thread safe. LPUSH, RPUSH, LLEN, LPOP, RPOP, LRANGE, list commands SADD, SREM, SISMEMBER, SMEMBERS, SUNION combine two sets ZADD, Z is a Sorted Sets based on the associated score. HSET, HGETALL, HGET, hash set in Redis, set value and get value.For future reading: Redis Doc, Redis Commands, Redis Twitter Clone, Redis data type Firebug in Firefox is a great tool!!!:Problem and Tips:如果想要找到element的绑定事件，请用firebug in firefoxClick the firebug icon, choose the “Enable all active panels” to activate the great functionality.I can get the binding event for the element. About the ruby performance optimization: 正在读这本书的Beta版本 Ruby Performance Optimization 两点注意：memory和GC，临时的变量，String::&lt;&lt; is very efficient. Each iterator will get a lot of objects created. Ruby bad in two areas: large data processing and complex computations. Ruby的两个弱势的地方。 Databases are really good at complex computations and other kinds of data manipulation.Rewrite the Ruby gem in C. Q: 智力竞猜，irb有多少的实现？A: One line: loop { p eval gets } use PRY the great console instead of the irb:gem install pry pry-doc gist gist String#each___line, put the code on github.help to see command list of pry.show-method, show-docin pry, use . to use the shell commandnestingjump-to 0show-input!amend-line, change the method code. Pry can do: show method definition, ruby and C implementation. show input of users. gist the help doc to github .cd change the locaiton through the shell command. go into the gem and show contants, method, … jump-to in the nesting gems amend-line modify the mistake before. edit-method method, open a new editor window to modify the code.binding pry, for debugwhereami install gem pry in the rails, modify config/environment/devlopment.rb file, ls -i, show the variables,Josh Mair, explain the prylike step in debugging, remote debuggin, pry-exception___explorer open pry after the exception happened,","tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"web application","slug":"web-application","permalink":"http://yoursite.com/tags/web-application/"},{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"Cucumber Recipes Book","date":"2015-04-16T13:36:07.000Z","path":"2015/04/16/cucumber-recipes-book/","text":"This book will be very useful for the future any project test process. Cucumber Recipes is a great book for transferring the recipes of the test cross different platform and languages. 开始的时候，就讲了一个关于美式英语，英式英语用词不一样的问题。map_header, map_table 对于table的命令. Use rtf to format the output of the cucumber result and produce the well designed word file! P.13 Run Slow setup/teardown code with Global Hooks. P.21 开始，讲述的是怎么把method放到lib文件的module中，然后加载到step_definition中 P.28 Use cucumber to test images. P.34 Use parallel to improve the speed of the tests’ parallel_tests Recipes 9 automatic run cucumber features test. Guard_cucumber Recipes 10 use Jenkins to run the test when there are changes by anyones of the team. Recipes 11 use Relish to publish the documentation of the cucumber features test.Relish Sitesrelish projects:add publishername/projectnamerelish push publishername/projectname Recipes 12..29 describe to use cucumber test in many kinds of scenario in different platform or hardware. Recipes 30 Parse HTML Tables by capybara.","tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"cucumber","slug":"cucumber","permalink":"http://yoursite.com/tags/cucumber/"},{"name":"recipes","slug":"recipes","permalink":"http://yoursite.com/tags/recipes/"}]},{"title":"Web site front tech: 页面加载、解析、渲染","date":"2015-04-14T15:38:37.000Z","path":"2015/04/14/web-site-front-tech/","text":"这篇文章很好的谈了加载、解析、渲染，并在最后有编写时的注意事项 I will create the snippet for slim file, As slim is so cool!!device/password/edit.html.slim is a good example of the slim file.","tags":[]},{"title":"Cucumber Book Reading Notes","date":"2015-04-13T21:23:15.000Z","path":"2015/04/13/cucumber-book-reading-notes/","text":"Great Cheatsheet to remember the capybara commandHow to write the simplest test in Ruby Gherkin is the cucumber syntax. No Silver Bullet [Bro95], Fred Brooks says:“The hardest single part of building a software system is deciding preciselywhat to build.” Fred Brooks Dry run, run the feature code without executing it, test it valid or not.1$ cucumber test.feature --dry-run How to write feature? Let’s see: Each scenario must make sense and be able to be executed independently ofany other scenario. Step Definition, wildcard: A small test of assertion from Ruby: Test::Unit::Assertions P.254, Chapter 15 it tells about using capybara to test AJAX web application. P.201, Chapter 12 test the WEB RESTFUL API. P.229, Chapter 14 rails testing. Scenario Outline is easier for us to write multiple scenarios. Chapter 6, give some suggestions on Cucumber Test. Chapter 7, explain how to create the cucumber application step by step. Chapter 8, talk about the support code. Chapter 9, Message Queues and Asynchronous Components.P.160, explain how to use the synchronizing with the delayed job.Two ways: Listening, or Sampling in this booTwo ways: Listening, or Sampling in this book. Chapter 11, from this chapter, we will get a point of how to use cucumber in different scenarios. Chapter 12, talks about how to use cucumber to test the WebAPI service. Chapter 13, test skills: Specification test: this kind of test used like a documentation to the development. Characterization test: this kind of test used like the scientific experiment. Chapter 15, use capybara to test the AJAX Web site.Cucumber is a tool not more than can parse the Gherkin feature files and execute step definitions. Capybara is the Ruby library for interacting with a web application.It provides an API for accessing web pages andinteracting with them in a way that is very similar to how a real user would—entering text in text fields and text areas, checking checkboxes, clickinglinks and buttons, and so on. In this Chapter, explains us how to test the search functionality with AJAX with capybara!!!! SO COOL !!! P.271 When the scenario fails, it can take a screenshot of the website.","tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"bdd","slug":"bdd","permalink":"http://yoursite.com/tags/bdd/"},{"name":"cucumber","slug":"cucumber","permalink":"http://yoursite.com/tags/cucumber/"}]},{"title":"Rails Test with Rspec FactoryGirl Guard and Capybara","date":"2015-04-09T20:34:52.000Z","path":"2015/04/09/rails-test-with-rspec-factorygirl-guard-and-capybara/","text":"rspec 主要的测试gemfactorygirl 用来fake数据，用户capybara 用户集成测试，整个体验guard-rspec 检测rspec修改情况，测试test之前调用起来gem install rb-fsevent 用来帮助guard检测文件视频地址 THE PARAGRAPHY is from the Rspec Book By Dan North: RSpec was created by Steven Baker in 2005, inspired by Dave’s aforementionedarticle. One of Dave’s suggestions was that with languageslike Smalltalk and Ruby, we could more freely explore new frameworksthat could encourage focus on behaviour. Cucumber is the idea coming out from Dan North and created by Aslak Hellesoy from Rspec’sStory Runner. We typically use Cucumber to describe behaviour of the applicationfrom the outside and RSpec to describe the behaviour of its componentparts.3 If you’ve ever done TDD before, you’re probably familiar withthe red/green/refactor cycle. We typically use Cucumber to describe behaviour of the applicationfrom the outside and RSpec to describe the behaviour of its componentparts.3 If you’ve ever done TDD before, you’re probably familiar withthe red/green/refactor cycle. Both cycles involve taking small steps and listening to the feedbackyou get from the tools. We start with a failing step (red) in Cucumber(the outer cycle). To get that step to pass, we’ll drop down to RSpec(the inner cycle) and drive out the underlying code at a granular level(red/green/refactor).At each green point in the RSpec cycle, we’ll check the Cucumber cycle.If it is still red, the resulting feedback should guide us to the next actionin the RSpec cycle. If it is green, we can jump out to Cucumber, refactorif appropriate, We like to expressstories in terms of a specific role (not just a generic user) because thatimpacts how we think about the requirement and why we’re implementingcode to satisfy it. Cucumber features have three parts to them: a title, a brief narrative,and an arbitrary number of scenarios which serve as our acceptancecriteria. Cucumber install options123rails generate cucumber:install --helprails generate cucumber:install // install cucumber or update cucumber Cucumber will install files:123456789101112create config/cucumber.yml //yml filecreate script/cucumberchmod script/cucumbercreate features/step_definitionscreate features/step_definitions/.gitkeepcreate features/supportcreate features/support/env.rb // environment file, change the database_cleaner runningexist lib/taskscreate lib/tasks/cucumber.rake // rake file, use this file to run cucumber testgsub config/database.ymlgsub config/database.ymlforce config/database.yml // modify database yml to add cucumber to test env In Ruby, when you calla method that is not defined, you get a NoMethodError. In Cucumber,you get notification of a pending step, which you can think of as anundefined step. Cucumber ProcessSo what just happened? When Cucumber parses a feature, it triesto match all of the steps in scenarios with step definitions written inRuby. Steps are defined by calling any of three methods provided byCucumber: Given( ), When( ), or Then( ). In this case, we called the Given( )method, passing it a Regexp and a block.When Cucumber sees a step definition, it stores the block in a hash-likestructure with the Regexp as its key. Then, for each step in a featurefile, it searches for a Regexp that matches the step, and executes theblock stored with that Regexp as its key. Single Responsibility PrincipleIf we return an array of messages, then the script needs to take on someof the responsiblity of what to display, and when to display it. Amongother problems, this is a violation of the Single Responsibility Principle Summary of first Three Chapters通过mastermind, 猜颜色的例子来介绍cucumber和rspec的整个流程，着重强调了Red/Green/Refactoring的流程。Cucumber 通过feature描述，scenario中Given, When, Then, And来map到所有的检测方法。Scenario Outline:用来定义可以加入参数的Template用于之后用Scenarios来添加参数。 123456789Scenario Outline: submit guessGiven the secret code is &lt;code&gt;When I guess &lt;guess&gt;Then the mark should be &lt;mark&gt;Scenarios: all colors correct| code | guess | mark || r g y c | r g y c | bbbb || r g y c | r g c y | bbww || r g y c | y r g c | bwww | ——————- Block ————————-使用throw，return一个hash结果。1throw :working_too_hard, true if person.hours_for(week) &gt; 50 empty?, predicate method in Ruby. P.141 RSpec supports writing custom matchers with a simple DSL Explain: Spec::Matchers::.. Actions, related pages(P.144): Have matcher has been removed change into:1`expect(your_object.size).to eq(num)`. Explain the it() and specify() function: Convert Test::Unit to RspecThe migration work essentially consists of refactoring the following Test::Unitelements to RSpec:• class SomeClassTest &lt; Test::Unit::TestCase becomes describe SomeClass• def test_something becomes it “should do something descriptive”• def setup becomes before(:each)• def teardown becomes after(:each)• assert_equal 4, array.length becomes array.length.should == 4&gt; Print the rspec docs with the output:1rspec --format documentation P.182 Begin to describe how to customize the rspec matcher DSL. 15 Chapter, discuss a lot about who to customize the rspec components(Global Configuration, Custom Example Group Classes, Custom Matcher, Macros, Cusom Formatter) P.200, 16 Chapter, explain how to use cucumber and rspec in rails project. Cucumber code example:P.228 will begin to explain the functionality of different command: visit, click_link, … Set the click_link not to use Javascript.作为BDD，TDD有一个重要功能是，测试优先可以更清晰的分解功能需求到相关的MVC中，model，view，controller。 Last 3 Chapters are very important about how to write the rails controller and views test rspec.","tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"rspec","slug":"rspec","permalink":"http://yoursite.com/tags/rspec/"},{"name":"factorygirl","slug":"factorygirl","permalink":"http://yoursite.com/tags/factorygirl/"},{"name":"capybara","slug":"capybara","permalink":"http://yoursite.com/tags/capybara/"},{"name":"guard-rspec","slug":"guard-rspec","permalink":"http://yoursite.com/tags/guard-rspec/"}]},{"title":"Regex and Shell Command","date":"2015-04-09T18:50:41.000Z","path":"2015/04/09/regex-and-shell-command/","text":"Test Regex Online Ruby Regex Tutorial 在shell命令中，2代表将error输出到指定输出口。&amp;1 代表标准处处stout，2&gt;&amp;1 2 一般指向标准错误，标准错误定位给1一般是标准输出。不是2&gt;1的原因是，2&gt;1会定位到文件名是1的文件中，&amp;1代表了这是file decriptor而不是文件名，在linux中所有的硬件都是输入输出，都是可以通过file descriptor访问，下面几个链接更好的说明了关系：Link 1Link 2Link 3 cmd &gt;&gt; file &gt;&gt; 代表追加的方法，不会把原有的内容覆盖掉。","tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"},{"name":"regex","slug":"regex","permalink":"http://yoursite.com/tags/regex/"}]},{"title":"Rails Seed Project","date":"2015-04-08T16:00:19.000Z","path":"2015/04/08/rails-seed-project/","text":"The aim of this blog is to memorize the process of customizing the Seed Project for future development. Source Code The branch is start_point, there is no any model or controllers except home_controller.TIPS: Gems:rack-mini-profiler, for monitoring the time consumption.slim, templating engine for organising the html, css, javascript code. Lazy registration demos: DEMO After: rails g devise:install create two files:config/initialize/devise** * .rb 里面是devise的配置信息config/locale/devise.yml 里面是devise的语言配置 rails g devise User 创建User表，model和test文件rails g devise:views 创建devise的所有view add layout function to the appliction controller 这样调用devise的时候会指定空的layout给他 devise的views修改相应内容。 在rails console中是看不到用户的密码的，只能重新设置。 在Application的方法里加入layout 或者 before-filter等方法，可以在每个controller运行之前调用。所以，加入要根据不同controller的view选择不同的layout可以加入到ApplicationController里面进行layout判定。 Convert erv file to slim file Branch: start _ point, this branch just integrate the views, there is no any model or config. Config all the devise views and finish the mailer configuration:step 1step 2引申出一个问题，在rails，project下怎么保存secure信息，通过Figaro Ruby Performance Optimization: Nginx, Passenger help us to handle the message queue. Configuration of the Nginx, Passenger server, Linux for optimizing the server. How to benchmark the server.","tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"seed project","slug":"seed-project","permalink":"http://yoursite.com/tags/seed-project/"}]},{"title":"Rails Rvm and Gemset","date":"2015-04-07T15:30:11.000Z","path":"2015/04/07/rails-rvm-and-gemset/","text":"This is about the summary of how to organise the rails code. At some attempting with rails, I found using rvm to manage the rails gemset is really an important thing for multiple projects in different rails/ruby version. List of workflow of RVM: install RVM rvm install 2.1.2 the version of the rubyrvm use 2.1.2 choose the ruby version rvm gemset list see the gemset listrvm gemset create rails_name/project_name usually for different rails version rvm gemset use the_name_above gem list ; list all the installed gems Use rvm to deploy passenger+nginxgem install passengerrvmsudo passenger-install-nginx-module","tags":[{"name":"rvm","slug":"rvm","permalink":"http://yoursite.com/tags/rvm/"},{"name":"gemset","slug":"gemset","permalink":"http://yoursite.com/tags/gemset/"},{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"}]},{"title":"Tech Blog Reading","date":"2015-04-07T13:34:19.000Z","path":"2015/04/07/tech-blog-reading/","text":"Blog Source: Backbonejs vs ANGULARJS: Demysifying the myths 前端做的事： Memory Management, Layout Management, Application Structure, Global Event Bus and Architectural decisions.内存管理，布局管理，应用结构，事件总线，结果决策。 Nested Models多层的对象，不能直接通过.访问，在backbone中。 Data Binding Non-Restful BackendNeed Backend support Restful, 没有很好的封装$.ajax函数。Angular支持$http Validation Templating","tags":[{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"},{"name":"angularjs","slug":"angularjs","permalink":"http://yoursite.com/tags/angularjs/"},{"name":"backbonejs","slug":"backbonejs","permalink":"http://yoursite.com/tags/backbonejs/"}]},{"title":"Development Process Should Be?","date":"2015-04-07T04:38:07.000Z","path":"2015/04/06/development-process-should-be/","text":"看了下一本javascript全栈开发的介绍，Aatz写的，引发了对开发过程的思考。 重点是找到能解决问题的能力的人，不是技术的能力。 1.自己昨天做了什么；2.今天准备做什么；3.是否需要从其他团队成员那里得到些什么。TDD:1.assertion2.code to past TDD3.refactory4.repeat 持续部署 callback sequence should be paid a lot attention.$(selector).loar(url,data, callback) 跑完了再跑callback$.ajax(options)$.get(…,type)$.post(…,type)$.getJSON(…)$.getScript(url,callback) jQuery, ajaxasync:false, processdata:false, 不把数据处理成字符串，当成源数据输出。 看北京的路有多宽，看上海路有多宽，粗细结合，","tags":[{"name":"development process","slug":"development-process","permalink":"http://yoursite.com/tags/development-process/"},{"name":"scrum","slug":"scrum","permalink":"http://yoursite.com/tags/scrum/"},{"name":"agile","slug":"agile","permalink":"http://yoursite.com/tags/agile/"}]},{"title":"d3 Book: Interactive Data Visualization for the Web","date":"2015-04-07T03:53:22.000Z","path":"2015/04/06/d3-book-interactive-data-visualization-for-the-web/","text":"Interactive Data Visualization for the Web, Written by Scott Murrayd3的数据过程： data load数据读取 data element binding数据元素绑定 element transform 元素位置变换 transition 数据位置变换 这本书，作为一个d3的入门级教材，很通俗易懂，语言生动幽默，总体介绍了整个流程，同时，总结了，数据呈现方面的现有技术和现有的问题。 大概分成三部分： 简单介绍HTML，CSS，D3安装基本信息。 数据的绑定 数据图形绘制svg，div的操作属性 比例尺，神奇的比例尺，类似scale，projection一种把图像投影的比例尺 数轴，axes， 更新，过度，动画 交互性，layout (书的源代码)[http://examples.oreilly.com/0636920026938/all_examples.zip] 比较重要的页数P.8-9 里面讲了，D3能做什么，D3不适合做什么。 P.14 用于D3的一些工具。 P.44 Javascript的注意事项： 动态类型，类型动态，所以容易犯类型用错的mistake 变量提升，所有变量的赋值会在开始而不是for loop中，容易错误调用。 函数作用域，只有函数块才是作用域，花括号不是。 window全局命名空间，var声明的属性都在全局命名空间里。 P.56-57 D3的兼容性问题解决方案 P.69-70 回调方法的使用。 P.115-118 里面关于比例尺的介绍。 P.120-122 几个好用的方法。shape-rendering用来解决刻度模糊的问题，ticks设置数轴内容，tickFormat()设置刻度，整个设计都很值得玩味。 1996 netscapte js2005 Jeffrey Heer ， Prefuse数据呈现方案用java写的。2009 protovis Jeffrey Heer and Mike Bostock2011 Mike Bostock， Vadim Ogievetsky，Jeffrey Heer D3 CSS： Cascading Style Sheets 像瀑布一样从上到下层叠HTML：Hypertext超文本， Markup表示型， languageJSON：javascript object notation,SVG: scalable vector graphicscx,cy, r, rx, ry python -m SimpleHTTPServer 8888, -m 跑module，SimpleHTTPServer是一个python的moduleattr()设置html属性，style()设置css属性 input！ domain！output！range！ 数据，比例尺，数轴。。。 另一本书，《跟顶级设计师学做信息图》里面的内容更偏重设计方向，不是软件解决问题的方向。里面讲了infographics，Malogiej International Infographics Awards, Infographics World Summit呈现分类：Diagram， Chart， Table， Graph， Map，PictgramAttractive， Clear， Simple， Flow， Wordless D3，解决的是怎么把数据通过更好的方式呈现给用户，呈现：意味着数据原本存在的信息要展现，同时也要加入作者关于数据的思考，并通过图像传达给用户。 思索感觉还是有一个问题如鲠在喉，不吐不快，毕竟D3才从2011年发展起来，主要还是靠Mike的很多源代码，怎么封装，怎么更好的模块化，命名chart都还是属于每个程序员自己风格的事情。 加油!努力找到自己的D3小技术栈。 http://examples.oreilly.com/0636920026938/all_examples.zippython -m SimpleHTTPServer 8888http://localhost:8888/chapter_09/18_dynamic_scale.htmlhttp://localhost:8888/chapter_10/10_delay.htmlbar chart 效果http://localhost:8888/chapter_09/29_dynamic_labels.html add and removebarcharthttp://localhost:8888/chapter_09/23_each_combo_transition_chained.htmlpoint chart p.177、189、210Cynthia Brewer多说一句：交互性 + 物理模拟 ＝ 难以抗拒的演示。我没法解释，但真是这样。不知何故，人类总是喜欢看到现实中的物体被呈现在屏幕上。 http://bl.ocks.org/mbostock/3711652d3 投影 （http://www.naturalearthdata.com/）（http://www.census.gov/geo/www/cob/cbf_state.html）","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"book","slug":"book","permalink":"http://yoursite.com/tags/book/"},{"name":"turning","slug":"turning","permalink":"http://yoursite.com/tags/turning/"},{"name":"scott murray","slug":"scott-murray","permalink":"http://yoursite.com/tags/scott-murray/"}]},{"title":"Translation of Block: Towards Reusable Charts","date":"2015-04-04T20:52:21.000Z","path":"2015/04/04/translation-of-block-towards-reusable-charts/","text":"原文地址 windse7en：程序幼猿一枚，初涉翻译深坑，喜欢加入很多个人理解一些口语化的内容，让技术文档不那么晦涩。 Towards Reusable Charts 我将提供一种用于d3封装重用图表的方便方法.等一下…123function chart() &#123; // generate chart here&#125;这就是一个函数；一个标准的代码重用单元！（你可以从包含的element中推断出函数维度，但是大多数图表需要一些配置信息 by Mike） ##配置 上面是我开玩笑的啦；不是所有的函数都需要配置。事实上来讲，既然大多数图表都需要定义一些他们的样式或者行为，我们就需要一个配置函数来帮我们完成这些。举个例子吧，你可能需要设定宽度、高度或者调色板。下面，让我们看一个用于传传参数的简单配置函数：（这是封装函数 0.02 版 by windse7en）123function chart(width, height) &#123; // generate chart here, using `width` and `height`&#125; 但是，对于调用来说，这就有点麻烦了：调用的时候，必须要存下所有的图表各种参数，然后传给图表，这种传参数可能发生在任何更新发生的时候。上面那样一个简单的函数不足以配置个复杂的图表。这时候就是面向对象派上用场来，就像其它各种图表库的方法一样：123function chart(config) &#123; // generate chart here, using `config.width` and `config.height`&#125; 尽管这样，调用的时候还是要管理图表的函数（可能需要有多个不一样的图片去选择）和配置object。为了把图表配置隐藏起来，我们就需要一个闭包closure：(一个方便的面向对象方法：Chart.prototype.render,也会有效，但是就需要在函数中，管理this的内容)12345function chart(config) &#123; return function() &#123; // generate chart here, using `config.width` and `config.height` &#125;;&#125;好了，现在调用者就仅仅需要说：1var myChart = chart(&#123;width: 720, height: 80&#125;);之后，只需要myChart()就可以更新了。Simple！ ##再配置但是即使这样，当你想要在构造图表以后在配置怎么办？或者你想要看一个图表的配置信息？上面的方法配置对象被闭包封锁，外面不能看到。幸运的是，JavaScript的函数都是objects，所以我们也可以存储配置信息在这个函数身上！123var myChart = chart();myChart.width = 720;myChart.height = 80;对之前的实现小改动一下，我们就可以得到配置了(下面的my函数，可以随便取名字，内部看得到，外面看不到 by Mike)12345function chart() &#123; return function my() &#123; // generate chart here, using `my.width` and `my.height` &#125;;&#125;再来一点语法上的小改变，我们可以让属性的getter-setter方法允许链式调用。这会让代码看起来更吊，也更方便改配置参数。图表也需要提供默认的配置值，因此新建图表设置属性就像：1var myChart = chart().width(720).height(80);如果想修改图表的话：1myChart.height(500);想要看图表信息的话：1myChart.height(); // 500函数内来讲，图表变得更复杂了一些，但是提供了很多便利！（同时，用多了以后这种模式会很自然而然 by Mike）123456789101112131415161718192021function chart() &#123; var width = 720, // default width height = 80; // default height function my() &#123; // generate chart here, using `width` and `height` &#125; my.width = function(value) &#123; if (!arguments.length) return width; width = value; return my; &#125;; my.height = function(value) &#123; if (!arguments.length) return height; height = value; return my; &#125;; return my;&#125;总结一下：这就是提供了getter-setter的闭包函数。这也是D3的其他重用对象用的模式，包括scalse,layouts,shapes,axes,等等。 ##实现现在图表已经被配置好了，但是两个重要的元素还没有。DOM元素用来引用图表（像div或者document.body），和要显示的数据。这些也可以放到配置里面，但是D3提供一种更自然的表现方式：the selection.把selection作为输入，整个图表将有更多的灵活性。举例来说，可以同时给多个元素调用图表，或者简单的在多个元素事件移动图表，而不需要解绑重绑。你完全可以准确控制什么时候，怎么样更新数据，更新修改（举例来说，用一个渐进而不是瞬时显示的更新的时候）。好处是，图标的数据呈现变得更方便了。 最简单的上述方法的实现，就是把selection作为参数出入：1myChart(selection);或者等价的，用selection.call:1selection.call(myChart);内部来讲，这样一个图表实现看起来就这样：12345function my(selection) &#123; selection.each(function(d, i) &#123; // generate chart here; `d` is the data and `this` is the element &#125;);&#125; ##例子（这段我就不翻译了，有很多代码和数据文件的连接，大家可以从原文地址中看） ##更多的关于未来的思考 我们现在已经有了一个strawman convention的重用呈现组件。但是差的还远嘞，无论对图表还是配置。传统的图表类型学就是最好的选择吗？可以考虑一下Grammar of Graphics。那里面有很多关于模块化单元的对比。即使仅仅用传统的图表类型，我们应该配置scale，axes吗？我们应该让图表自动支持互动和动画吗？用户可以接触你的表的内部并且处理各种行为吗？对于这些可能都需要配置的方便，所以继续努力吧！","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"chart","slug":"chart","permalink":"http://yoursite.com/tags/chart/"},{"name":"translation","slug":"translation","permalink":"http://yoursite.com/tags/translation/"}]},{"title":"d3 Pack Chart","date":"2015-04-03T16:29:21.000Z","path":"2015/04/03/d3-pack-chart/","text":"Pack Chart 展示打包的关系。 TUTORIAL 这个样例差不多，因为要引入json所以没有在fiddle上的code。","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"chart","slug":"chart","permalink":"http://yoursite.com/tags/chart/"}]},{"title":"d3 Force Chart","date":"2015-04-03T15:37:53.000Z","path":"2015/04/03/d3-force-chart/","text":"Force Chart: 力学图，通过引力斥力展现数据点之间的关系强弱。 TUTORIAL 设定数据：nodes，links。 配置数据：d3.layout.force().nodes(nodes).links(links).处理结点，边的数据。 绘制边的图像：append(‘line’) colorscale for circle 绘制定点的图像：append(‘circle’) 设定force_layout.drag可以对点进行拖动。 设定tick变化了以后重新绘制力学图。 12345678force_layout.on(\"tick\", function()&#123; svg_edges.attr(\"x1\",function(d)&#123; return d.source.x; &#125;); svg_edges.attr(\"y1\",function(d)&#123; return d.source.y; &#125;); svg_edges.attr(\"x2\",function(d)&#123; return d.target.x; &#125;); svg_edges.attr(\"y2\",function(d)&#123; return d.target.y; &#125;); svg_nodes.attr(\"cx\",function(d)&#123; return d.x; &#125;); svg_nodes.attr(\"cy\",function(d)&#123; return d.y; &#125;); &#125;); JSfiddle上的代码","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"chart","slug":"chart","permalink":"http://yoursite.com/tags/chart/"}]},{"title":"d3 Tree Chart","date":"2015-04-03T15:32:19.000Z","path":"2015/04/03/d3-tree-chart/","text":"Tree图，主要为了表现层次关系，类似家谱，年表。他和cluster不一样是，每个level之间是同一层次的。 TUTORIAL 数据转换：d3.layout.tree() 转换数据 生成贝赛尔曲线：d3.svg.diagonal() 生成贝塞尔曲线，绘制曲线path 每个nodes配置：给每个node放置label和circle 最后，做完的样子：Tree Chart","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"chart","slug":"chart","permalink":"http://yoursite.com/tags/chart/"}]},{"title":"d3 Pie Chart","date":"2015-04-03T14:08:40.000Z","path":"2015/04/03/d3-pie-chart/","text":"Donut Chart, Pie Chart, 大饼图，经常用来展示部分和总体之间的关系，数据比例。 TUTORIAL 绑定数据：d3.layout.pie(),从数据算出弧的角度。padAngle(.02)设定每个pie之间的间隔角度。 设定arc大小：d3.svg.arc() 设定弧的外径，内径设置大小。d3 arc Original Doc 绑定数据，绑定group。 绘制path图形：在group里面进行绘制，绘制内外径填充颜色。 加上text：arcs.append(“text”)","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"chart","slug":"chart","permalink":"http://yoursite.com/tags/chart/"}]},{"title":"d3 Cluster Chart","date":"2015-04-02T18:53:31.000Z","path":"2015/04/02/d3-cluster-chart/","text":"cluster 图，主要为了表现层次关系，类似家谱，年表。 TUTORIAL 数据转换：d3.layout.cluster() 转换数据 生成贝赛尔曲线：d3.svg.diagonal() 生成贝塞尔曲线，绘制曲线path 每个nodes配置：给每个node放置label和circle 最后，做完的样子：Cluster Chart","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"chart","slug":"chart","permalink":"http://yoursite.com/tags/chart/"}]},{"title":"d3 Chord Chart","date":"2015-04-02T14:54:04.000Z","path":"2015/04/02/d3-chord-chart/","text":"弦图（ Chord ），主要用于表示两个节点之间的联系。 两点之间的连线，表示谁和谁具有联系： 线的粗细代表权重。 TUTORIAL 数据处理：Chord图用的是matrix数据，在一个nXn 的matrix里表现的是之间的关系，先从matix中根据chord的layout生成一个matirx的object，里面有groups和chords，group表现的是n个组的各种角度，chords里面存的是matix中每个cell的值，有权重，根据权重绘制每个arc的粗细。 添加svg，控制原点：添加svg，svg中添加g，给g，设定transform(translation)，移动原点，作为chord的中心。 颜色配置：d3.scale.category20(); scale 从index或得相关的颜色。 弧线计算：d3.svg.arc().innerRadius.outerRadius, 设定弧线计算公式，内径外径。 绘制path：g.selectAll(“path”).data.enter().append(“path”).style(fill).style(stroke).attr(d) path的d属性整个path的路径。 标签text：每个标签，rotate，translate到相应的位置。 绘制内部弦：给弦加载数据，设置path。着色，event绑定。 最后，做完以后的样子Chord Chart","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"chart","slug":"chart","permalink":"http://yoursite.com/tags/chart/"}]},{"title":"Vista EHR migration","date":"2015-04-01T19:06:07.000Z","path":"2015/04/01/vista-ehr-migration/","text":"HL7 manualhttp://www.va.gov/vdl/documents/Infrastructure/Health_Level_7_(HL7)/hlo_system_manager_manual.pdf Infrastructure of VistaeClinicalWorksFree Conversion from Your Existing EHR to eClinicalWorks","tags":[{"name":"vista","slug":"vista","permalink":"http://yoursite.com/tags/vista/"}]},{"title":"D3 js learning process","date":"2015-04-01T14:53:00.000Z","path":"2015/04/01/d3-js-learning-process/","text":"强烈推荐的Blog，里面的资料整理很全面：d3 学习资料OUR d3.jsMike Bostock D3 examples里面有超多的Mike Bostock写的d3的例子，但是不太容易检索。 学习d3的相关教程: 为什么选择d3？ Mike Bostock的d3教程部分中文版 Scott Murray的d3教学 关于d3关于数据可视化的blog，入门 d3相关的学习Blog： 简单入门并且有些思考 Mike Bostock的关于d3 joins的Blog JSfiddle: windse7en’s JSFiddle 动起来的柱状图 让动起来的加上鼠标事件 d3 学习tips：不要忘记加 d3学习笔记在google，doc上 d3 学习过程：选择元素– 绑定数据– 添加元素– 添加文字 d3的元素：svg，scale，axis，d3元素响应事件 d3的作品： 散点图（二维）：中国2014年各省购车情况 时间轴，方格阵：中国股市晴雨图中国历史人口150年Great Performance Coordinates","tags":[{"name":"d3","slug":"d3","permalink":"http://yoursite.com/tags/d3/"},{"name":"data visualization","slug":"data-visualization","permalink":"http://yoursite.com/tags/data-visualization/"}]},{"title":"Integrate polymer with rails","date":"2015-03-27T14:09:35.000Z","path":"2015/03/27/integrate-polymer-with-rails/","text":"Polymer is the Google new designed web component solution. It aims to solve the structure the confusing css and js files. Polymer WebsitePolymer Rails GithubPolymer Core Elements GithubPolymer Paper GithubTips for how to use the polymerEmcee tips for polymerPolymer Core elements Tag-bar-Toggle: ,tt in the nmap mode, The , is like the leader key.shift-mouse-right-click: paste the code.VIM nmap shortcuts: ]s jump to the next misspelling word, [s, jump to the last word.zg add the word to the spelling check dictionary. zug undo add the word, “z=” view the spelling suggestions.autocmd BufEnter /usr/share/vim/vim73/doc/ .txt set nospellautocmd BufLeave /usr/share/vim/vim73/doc/ .txt set spell In the Markdown file, is the symbol emphasis*","tags":[{"name":"web component","slug":"web-component","permalink":"http://yoursite.com/tags/web-component/"},{"name":"polymer","slug":"polymer","permalink":"http://yoursite.com/tags/polymer/"}]},{"title":"Advanced Unix Programming: Shell","date":"2015-03-25T03:03:19.000Z","path":"2015/03/24/advanced-unix-programming-shell/","text":"Shell tags: Bourne shell, Korn shell, C shell.其他和bash的功能差距主要是补充了作业控制，历史记忆机制和命令行编辑。 A useful language needs arrays, pointers and a generic mechanism for building data structure. Herbert Mayer where not to use shell scriptsshell time related commandsystem administrator commands帮助我编译手中的程序 第一章 UNIX基础知识第一个ls函数实现，具体讲了整个代码流程。 文件描述符文字描述符是一个小的非负整数，内核用以标识一个特定进程正在存访的文件。当内核打开一个现存文件或创建一个新文件时，它就返回一个文件描述符。当读、写文件时，就可使用它。 每当运行一个新程序，打开三个file descriptor: stdin, stdout, stderr easy_shell.c, 里面是一个简单的shell，读入用户的输入，父进程fork一个进程，进程执行命令，执行完命令回到父进程，父进程判断子进程退出完全。 function:fork(), getpid(), getuid(), getgid(), waitpid(pid, &amp;status, 0), signal(SIGNIT, sig_int), fgets(buf, MAXLINE, stdin), execlp(buf, buf, (char pointer) 0); Command:cd /usr/includetime grep something &gt; /dev/null, give the real time, user CPU time, system CPU time.user CPU time: 用户指令时间。system CPU time：系统内核执行时间。time 很方便的可以看到用户指令时间和系统内核调用时间，可以用来对比ruby，python的执行效果，非常容易使用，把输出结果重定位到&gt; /dev/null 这样没有其他杂乱的显示。 分配内存：用户代码-》malloc库函数-》sbrk系统调用 第一章总结第一章里面讲了很多unix的基础知识，用一个很清晰的shell的例子，解释了shell的运行规则，c语言调用的整个程序过程，比较pragmatic的有时间time，进程的fork、wait。ANSI C standard, and POSIX standard 1.12 P.1-P.17 第二章 UNIX标准化及实现ANSI C, 美国国家标准学会，1990的C标准库==，系统的很多库，标准的库，之前用到的： signal.h for signal stdio.h for standard I/O, this is default stdlib.h for standard public library, a lot of default libarry unistd.h for unicode standard For sys/**.. .h we have: sys/wait.h for process management IEEE POSIX, 1003下面有至少15个子委员会，1003.2 针对shell和公用程序的标准，1003.7针对系统管理方面的标准。 基于这三种标准，有SVR4，4.3+BSD的实现。 第二章 总结这章主要对比了unix的不同版本的标准化，并提供方法如何去找到限制。2.9 P.18-P.36 第三章 文件 I/Oopen, read, write, lseek, close, atomic 特性，线程安全，不带缓存的系统I/O lseek 记录文件在内核中的位移量。FILENO from 0 ~ OPEN _ MAX, 0 stdin, 1 stdout, 2 stderr 通过lseek可以创建中间有空洞的文件，file.holefcntl, function, ioctl function. 第三章 总结这一章讲了很多文件调用的内容，打开文件的标示，异步、同步、打开文件，buffsize的大小对效率的一影响，原子操作，介绍ioctl和fcntl？，ioctl用于流I/O,fcntl用于记录锁. 3.16, P.37-P.53 第四章 文件和目录","tags":[{"name":"unix","slug":"unix","permalink":"http://yoursite.com/tags/unix/"},{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"Lifenotes: March 24","date":"2015-03-24T18:31:33.000Z","path":"2015/03/24/lifenotes-march-24/","text":"今天和李哥，聊了挺多关于人生、男人的话题，总结如下： 男人抓大方向，别抓细节。不要纠结过去，抓住当下，未来随缘人生选择A了，选择B也是合理的。不要纠结理由。任何的存在都是合理的，每个人都有自己的理由。做好自己，当痛苦选择的时候，其实是没有能力提供更好的选择。 Linkedin HAS COST ME $300, unconsciously!!! 以后任何填写卡的信息的都要特别注意，动不动就自动付钱，一扣就是一个月，伤不起啊！！！！ Ruby doc gems","tags":[{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"Algorithm: The Shortest Path, 关于最短路径的算法","date":"2015-03-24T17:42:16.000Z","path":"2015/03/24/algorithm-the-shortest-path/","text":"A*, DFS, BFS, Dijkstra, Prim Tree. 每个算法有自己的优劣。这两篇谈的挺好。 A星算法 A star wiki BFS, DFS 主要是面对遍历整个图找到最优解的情况，默认只有遍历整个图了以后才可能找到最优解。A星算法是每次决定下一个子节点的时候进行估值，来找到最好解的方向。快速。","tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://yoursite.com/tags/algorithm/"},{"name":"graph","slug":"graph","permalink":"http://yoursite.com/tags/graph/"},{"name":"dfs","slug":"dfs","permalink":"http://yoursite.com/tags/dfs/"},{"name":"bfs","slug":"bfs","permalink":"http://yoursite.com/tags/bfs/"}]},{"title":"VIM Ultimate distribution","date":"2015-03-22T02:40:06.000Z","path":"2015/03/21/vim-ultimate-distribution/","text":"Use the spf13-vim to make the default configuration of the vim, quite helpful.Store all my own vimrc settings in the .vimrc.local The color schemes for spf13:fruity, ir_black, molokai, peaksea The silver search: ag, search the string from the current directory, not from the project directory.","tags":[{"name":"vim","slug":"vim","permalink":"http://yoursite.com/tags/vim/"}]},{"title":"How to use google","date":"2015-03-20T15:26:46.000Z","path":"2015/03/20/how-to-use-google/","text":"How to use google?Insight: The searching result ofen is coming form some specified websites: like stackoverflow for coding problems, stackexchange for engineering problems, vim for plugin information… I try to write python importing the selenium to search keywords in specified websites. But I found some interesting things on Google Search. So let’s redesign the problem: Originally, the problem is: Can we redesign the desplay way of the searching workflow and the search result view? Talk with my workmate Yu Wang. I should reclaim the problem: How to improve the searching result in Google Search? Sure, these two are quite different problems. For now, I think I should learn No.2 first. To figure out what the capability of Google Search is. Other Search Engine:Duckduckgo: Try it for searching some daily affairs. So the capabilities of Google Search are: Tell you what’s wrong with the search expression(I use search expression to instead of the keywords, as the search expression is more powerful)Pros: ignore invalid character, help you to make keywords precision. site:google.com, only search in the domain area.Pros: Search specified site, you don’t need try to think out some tech words for the questions. link:google.com, search websites link to the domain name.Pros: Help you to find some Summarization Website or Blogs. related:stackoverflow.comPros: Find some substitutes of the website used.FUN: I find netvibes to try OR check one of the two keywordsPros: Sometime, not sure which words is the best way to approach the problem “google.com”, check URLS contains the term “google.com”Pros: Find some interesting functionality provided by the host. cache:website.com, see the google cache of the websitePros: Some times, only cache contains some useful information. -: minus, - excludes the results that include the word or site.Pros: useful for some words with multiple meanings","tags":[{"name":"search","slug":"search","permalink":"http://yoursite.com/tags/search/"},{"name":"google","slug":"google","permalink":"http://yoursite.com/tags/google/"}]},{"title":"Scrapy: python module to web crawling and scrapying","date":"2015-03-19T18:48:25.000Z","path":"2015/03/19/scrapy-python-module-to-web-crawling-and-scrapying/","text":"Use scrapy to crawl the amazon products’ comments: Install the ipython first:Tip1: use these two lines to implement the python autocompleteautocomplete for python command linelink12import rlcompleter, readlinereadline.parse_and_bind('tab:complete')","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"scrapy","slug":"scrapy","permalink":"http://yoursite.com/tags/scrapy/"},{"name":"crawl","slug":"crawl","permalink":"http://yoursite.com/tags/crawl/"}]},{"title":"VIM plugin bug adventure '%' sign","date":"2015-03-19T17:57:50.000Z","path":"2015/03/19/vim-plugin-bug-adventure-percent-sign/","text":"Today, I tried to use % to jump between (), use %x``x to delte a pair of () in the markdown file. But I found the situation is : The first time of % , work. But the trials after that, doesn’t work. It’s only appearing the editing with the MARKDOWN file no matter where the location is. Steps to figure out problem: open ~/.vimrc check func open file in other location to test use the command: trouble shooting in vimlink1vim -N -u NONE -i NONE Open the file in -u(None vimrc file), -i(None viminfo file), -N(nocompatable) mode to track the problem appears or not. use map, and nmap to check out % has been remapped to the % remap to1n % * :&lt;C-U&gt;call &lt;SNR&gt;19_Match_wrapper('',1,'n') &lt;CR&gt; No any map record in the -u mode of vim I just leave the bug there, as it works fine for other files. Update by 2015-03-25 Create a paste_to_vim shell to help paste string from tmux to the vim.Configure ~/.vimrc.local to paste from the ~/paste.tmp file.Configure ~/.vimrc.local to delete the file in the buffer.Configure ~/.vimrc.local to start the open file in the edit command. :help i_CTRL-W check the ctrl-w binding key in the insert mode.:help index will show the manual help file for the key binding in vim","tags":[{"name":"vim","slug":"vim","permalink":"http://yoursite.com/tags/vim/"},{"name":"vimrc","slug":"vimrc","permalink":"http://yoursite.com/tags/vimrc/"}]},{"title":"Python manipulate Mouse and Keyboard crossplatform","date":"2015-03-19T01:05:58.000Z","path":"2015/03/18/python-manipulate-mouse-and-keyboard-crossplatform/","text":"Today, my workmate tried to use MFC win32 in C++ language to manipulate the mouse in windows. But, you know, the C++ language is a very old old friend to me. For me, it’s very hard to understand the C++ program in a short time. In contrast to C++,Python is much more friendly and directly. So I have a question, how to use python to manipulate the mouse and keyboard? NOW, the solution is PyUserInput. PyUserInput combines pymouse and pykeyboard. For windows, it originally used the pywin32 module. In the guidleline of PyUserInput on Github, there are crossplatform dependences for install PyUserInput. Some tips for installing windows dependences: pywin32, pyHookpywin32 provides 32-bit and 64-bit. python 2.7 version. But pyHook in sourceforge.com only provides the 32-bit version. We can download the 64-bit wheels file from the link above and use pip install to install the wheels file. install Xlib in Linux:install xlib1sudo pip install svn+https://svn.code.sf.net/p/python-xlib/code/trunk/ After create the first project, it alerts me to install service_identity module","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"mouse","slug":"mouse","permalink":"http://yoursite.com/tags/mouse/"}]},{"title":"Change title and schedule the learning","date":"2015-03-18T20:00:26.000Z","path":"2015/03/18/change-title-and-schedule-the-learning/","text":"I changed the title totitle expression 1while(1)&#123;IMPROVE;&#125; for: To memory the C syntax is so foundation, like the definition of the block, ; idicates the end of the line, () to include the expression, CAPITAL variable should be the constant value, use ^0 value to indicate the true. Improve everything, coding, writing skills, speech capability and daily life… Never stop investing. Never stop improving. Never stop doing something new. Bob ParsonsGoDaddy Founder The study board for mastering octopress or jekyll framework: Be familiar with the jekyll structure. Master the method to style the context. _config.yml file study liquid Create the sidebar for convenience of retrieving the other info, like: good ruby on rails books.","tags":[{"name":"jekyll","slug":"jekyll","permalink":"http://yoursite.com/tags/jekyll/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"}]},{"title":"Setting up Octopress publishing framework and configure the themes","date":"2015-03-18T02:28:07.000Z","path":"2015/03/17/setting-up-octopress-publishing-framework-and-configure-the-themes/","text":"Today, when I reorganise my bookmarks, I found I need some way to organise all the tech blog or web links I have read. After searching, I found the octopress through the rubytoolbox, this ruby blog engine is the most widely used. Before I searched for the Blog Engine, the 1st thing coming into my mind is the functionality: I CAN DO ANYTHING. The object and yinyang theme have some problem with the SASS files. I think it dues to the diff verison of SASS. zsh doesn’t support the[] in the command, so need to make a alias to that, based on the http://octopress.org/docs/blogging/ FIX problem:Load nil request Markdown Link","tags":[{"name":"Blog Engine","slug":"Blog-Engine","permalink":"http://yoursite.com/tags/Blog-Engine/"},{"name":"Jekyll","slug":"Jekyll","permalink":"http://yoursite.com/tags/Jekyll/"}]}]